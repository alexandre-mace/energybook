{"version":3,"sources":["UI/components/Line.js","UI/components/MultipleLines.js","UI/components/Doughnut.js","UI/components/MultipleBars.js","UI/components/Bubble.js","App.js","serviceWorker.js","index.js","Dataset/total_energy_consumption.csv","Dataset/total_co2_emissions.csv","Dataset/total_electricity_consumption.csv","Dataset/renewables_share.csv","Dataset/investment-in-renewable-energy-by-technology.csv","Dataset/energy-use-per-capita-vs-share-of-population-in-extreme-poverty.csv","Dataset/total_final_consumption_by_sector.csv"],"names":["Line","name","keys","values","options","color","data","labels","datasets","label","lineTension","displayColors","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","MultipleLines","datasetsValues","Array","isArray","map","dataset","o","Math","round","r","random","getRandomColor","Doughnut","plugins","datalabels","render","fontSize","fontStyle","fontColor","fontFamily","value","MultipleBars","type","stack","Bubble","x","y","file","setter","index","a","fetch","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","results","Papa","parse","header","rows","Object","filter","row","year","getEnerdataCsv","countrySetter","zone","parseFloat","rowsData","concat","apply","key","Year","parseInt","Entity","showRenewableCategory","showOnlyRenewableCategories","showOnlyNonRenewableCategories","entityKey","entity","renewableCategories","variables","variable","i","entities","length","countryEntityKey","push","years","includes","display","split","conversionFactor","renewables","nonRenewables","renewableValues","forEach","nonRenewableValues","getOwidJson2","autoComplete","setIndex","Autocomplete","size","getOptionLabel","option","toString","defaultValue","fullWidth","onChange","event","renderInput","params","TextField","className","style","width","isNaN","placeholder","App","React","useState","loading","setLoading","totalCo2EmmisionsIndex","setTotalCo2EmmisionsIndex","totalCo2Emmisions","setTotalCo2Emmisions","totalCo2EmmisionsCountries","setTotalCo2EmmisionsCountries","totalEnergyConsumptionIndex","setTotalEnergyConsumptionIndex","totalEnergyConsumption","setTotalEnergyConsumption","totalEnergyConsumptionCountries","setTotalEnergyConsumptionCountries","totalElectricityConsumptionIndex","setTotalElectricityConsumptionIndex","totalElectricityConsumption","setTotalElectricityConsumption","totalElectricityConsumptionCountries","setTotalElectricityConsumptionCountries","renewablesShareIndex","setRenewablesShareIndex","renewablesShare","setRenewablesShare","renewablesShareCountries","setRenewablesShareCountries","energySupplySourceIndex","setEnergySupplySourceIndex","energySupplySourceDatasets","setEnergySupplySourceDatasets","energySupplySourceCountries","setEnergySupplySourceCountries","energySupplySourceYear","setEnergySupplySourceYear","showRenewableCategories","setShowRenewableCategories","energySupplySourceDoughnutMode","setEnergySupplySourceDoughnutMode","energySupplySourceOnlyRenewables","setEnergySupplySourceOnlyRenewables","energySupplySourceOnlyNonRenewables","setEnergySupplySourceOnlyNonRenewables","renewableEnergyInvestmentIndex","renewableEnergyInvestmentDatasets","setRenewableEnergyInvestmentDatasets","setRenewableEnergyInvestmentCountries","renewableEnergyInvestmentPercentageIndex","renewableEnergyInvestmentPercentageDatasets","setRenewableEnergyInvestmentPercentageDatasets","setRenewableEnergyInvestmentPercentageCountries","renewableEnergyInvestmentByTechnologyIndex","renewableEnergyInvestmentByTechnologyIndexDatasets","setRenewableEnergyInvestmentByTechnologyDatasets","setRenewableEnergyInvestmentByTechnologyCountries","energyUsePerCapitaVsPovertyIndex","energyUsePerCapitaVsPovertyDatasets","setEnergyUsePerCapitaVsPovertyDatasets","energyUsePerCapitaVsPovertyYear","totalFinalConsumptionBySectorDatasets","setTotalFinalConsumptionBySectorDatasets","getEnergyConsumption","totalEnergyConsumptionData","getCo2Emissions","totalco2EmissionsData","getElectricityConsumption","totalElectricityConsumptionData","getRenewablesShare","renewablesShareData","getTotalFinalConsumptionBySector","getIaeDataCsv","totalFinalConsumptionBySectorData","getEnergySupplySource","getOwidJson","energySupplySource","getRenewableEnergyInvestmentByTechnology","getOwidCsv","renewableEnergyInvestmentByTechnology","getEnergyUsePerCapitaVsPoverty","getOwidBubbleCsv","energyUsePerCapitaVsPoverty","useEffect","renewableEnergyInvestment","renewableEnergyInvestmentPercentage","delayedCloseLoader","setTimeout","dataComputed","computed","console","log","onClick","window","location","reload","scales","yAxes","ticks","beginAtZero","suggestedMax","legend","FormGroup","FormControlLabel","control","Switch","checked","array","findIndex","arrayValue","stacked","position","reverse","xAxes","anchor","context","dataIndex","align","font","weight","formatter","offset","padding","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"6dAkCeA,EA/BF,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OAAd,IAAsBC,eAAtB,MAAgC,GAAhC,MAAoCC,aAApC,MAA4C,aAA5C,SACT,kBAAC,OAAD,CACID,QAASA,EACTE,KAAM,CACFC,OAAQL,EACRM,SAAU,CACN,CACIC,MAAOR,EAEPS,YAAa,GACbC,eAAe,EACfC,gBAAgB,QAAD,OAAUP,EAAV,SACfQ,YAAY,QAAD,OAAUR,EAAV,OACXS,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAiB,QAAD,OAAUb,EAAV,OAChBc,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA0B,QAAD,OAAUjB,EAAV,OACzBkB,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChBpB,KAAMH,QCpB1B,IAoCewB,EApCO,SAAC,GAA8B,IAA7BnB,EAA4B,EAA5BA,SAA4B,IAAlBJ,eAAkB,MAAR,GAAQ,EAC1CwB,EAAkBC,MAAMC,QAAQtB,GAAaA,EAAWA,EAASL,OAEvE,OACA,kBAAC,OAAD,CACIC,QAASA,EACTE,KAAM,CACFC,OAAQC,EAAS,GAAKA,EAAS,GAAGN,KAAOM,EAASN,KAClDM,SAAUoB,EAAeG,KAAI,SAAAC,GACzB,IAAM3B,EAftB,WACI,IAAI4B,EAAIC,KAAKC,MAAOC,EAAIF,KAAKG,OAC7B,OAAOJ,EADkC,IAChCG,KAAS,IAAMH,EADiB,IACfG,KAAS,IAAMH,EADA,IACEG,KAajBE,GACd,MAAO,CACH7B,MAAOuB,EAAQ/B,KAEfS,YAAa,GACbC,eAAe,EACfC,gBAAgB,QAAD,OAAUP,EAAV,SACfQ,YAAY,QAAD,OAAUR,EAAV,OACXS,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAiB,QAAD,OAAUb,EAAV,OAChBc,qBAAqB,QAAD,OAAUd,EAAV,OACpBe,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA0B,QAAD,OAAUjB,EAAV,OACzBkB,sBAAsB,QAAD,OAAUlB,EAAV,OACrBmB,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,IAChBpB,KAAM0B,EAAQ7B,e,MC7BlC,IAsBeoC,EAtBE,SAAC,GAAD,IAAE/B,EAAF,EAAEA,SAAF,EAAYJ,QAAZ,OACb,kBAAC,WAAD,CACIA,QAAS,CACLoC,QAAS,CACLC,YAAY,EACZlC,OAAQ,CACJmC,OAAQ,QACRC,SAAU,GACVC,UAAW,OACXC,UAAW,OACXC,WAAY,yCAIxBxC,KAAM,CACFC,OAAQC,EAASuB,KAAI,SAAAC,GAAO,OAAIA,EAAQ/B,QACxCO,SAAU,CAAC,CACPF,KAAME,EAASuB,KAAI,SAAAC,GAAO,OAAIA,EAAQe,SACtCnC,gBAAiBJ,EAASuB,KAAI,gCAxB9C,WACI,IAAIE,EAAIC,KAAKC,MAAOC,EAAIF,KAAKG,OAC7B,OAAOJ,EADkC,IAChCG,KAAS,IAAMH,EADiB,IACfG,KAAS,IAAMH,EADA,IACEG,KAsBaE,GAAd,kB,2BCxB9C,SAASA,IACL,IAAIL,EAAIC,KAAKC,MAAOC,EAAIF,KAAKG,OAC7B,OAAOJ,EADkC,IAChCG,KAAS,IAAMH,EADiB,IACfG,KAAS,IAAMH,EADA,IACEG,KAG/C,IAkBeY,EAlBM,SAAC,GAA8B,IAA7BxC,EAA4B,EAA5BA,SAA4B,IAAlBJ,eAAkB,MAAR,GAAQ,EAC/C,OACI,kBAAC,IAAD,CACI6C,KAAM,MACN7C,QAASA,EACTE,KAAM,CACFC,OAAQC,EAASN,KACjBM,SAAUA,EAASA,SAASuB,KAAI,SAAAC,GAGhC,MAAO,CACHvB,MAHUuB,EAAQ/B,KAIlBiD,MAAO,EACP5C,KAAM0B,EAAQ7B,OACdS,gBAAgB,QAAD,OAAU0B,IAAV,iB,OClBnC,SAASA,IACL,IAAIL,EAAIC,KAAKC,MAAOC,EAAIF,KAAKG,OAC7B,OAAOJ,EADkC,IAChCG,KAAS,IAAMH,EADiB,IACfG,KAAS,IAAMH,EADA,IACEG,KAG/C,IAiBee,EAjBA,SAAC,GAAD,IAAE3C,EAAF,EAAEA,SAAF,IAAYJ,eAAZ,MAAsB,GAAtB,SACX,kBAAC,SAAD,CACIA,QAASA,EACTE,KAAM,CACFC,OAAQC,EAASuB,KAAI,SAAAzB,GAAI,OAAIA,EAAKG,SAClCD,SAAUA,EAASuB,KAAI,SAAAC,GACnB,MAAO,CACHvB,MAAOuB,EAAQvB,MACfG,gBAAgB,QAAD,OAAU0B,IAAV,SACfd,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChBpB,KAAM,CAAC,CAAC8C,EAAGpB,EAAQ1B,KAAK8C,EAAGC,EAAGrB,EAAQ1B,KAAK+C,EAAGjB,EAAG,Y,4CCOrE,WAA6BkB,EAAMC,EAAQC,GAA3C,6BAAAC,EAAA,sEAC2BC,MAAMJ,GADjC,cACUK,EADV,OAEUC,EAASD,EAASE,KAAKC,YAFjC,SAGyBF,EAAOG,OAHhC,OAGUC,EAHV,OAIUC,EAAU,IAAIC,YAAY,SAC1BC,EAAMF,EAAQG,OAAOJ,EAAOjB,OAC5BsB,EAAUC,IAAKC,MAAMJ,EAAK,CAAEK,QAAQ,IACpCC,EAAOJ,EAAQ/D,KAEfH,EAASuE,OAAOxE,KAAKuE,EAAK,IAAIE,QAAO,SAAAC,GAAG,MAAY,SAARA,KAClDrB,EAAO,CACHrD,KAAMuE,EAAK1C,KAAI,SAAA6C,GAAG,OAAIA,EAAIC,QAE1B1E,OAAQA,EAAOwE,QAAO,SAAA5B,GAAK,MAAc,UAAVA,KAAmBhB,KAAI,SAAAgB,GAAK,MAAK,CAC5D9C,KAAM8C,EACN5C,OAAQsE,EAAK1C,KAAI,SAAA6C,GAAG,OAAIA,EAAI7B,YAfxC,6C,+BAoBe+B,E,oFAAf,WAA8BxB,EAAMC,EAAQwB,EAAevB,GAA3D,2BAAAC,EAAA,sEACyBC,MAAMJ,GAD/B,cACQK,EADR,OAEQC,EAASD,EAASE,KAAKC,YAF/B,SAGuBF,EAAOG,OAH9B,OAGQC,EAHR,OAIQC,EAAU,IAAIC,YAAY,SAC1BC,EAAMF,EAAQG,OAAOJ,EAAOjB,OAC5BsB,EAAUC,IAAKC,MAAMJ,EAAK,CAAEK,QAAQ,IACpCC,EAAOJ,EAAQ/D,KAErByE,EAAcN,EAAK1C,KAAI,SAAA6C,GAAG,OAAIA,EAAII,SAClCzB,EAAO,CACLrD,KAAMwE,OACDxE,KAAKuE,EAAKE,QAAO,SAAArE,GAAI,OAAIA,EAAK0E,OAASxB,KAAO,IAC9CmB,QAAO,SAAArE,GAAI,MAAa,SAATA,KAEpBH,OAAQuE,OACHvE,OAAOsE,EAAKE,QAAO,SAAArE,GAAI,OAAIA,EAAK0E,OAASxB,KAAO,IAChDmB,QAAO,SAAA5B,GAAK,MAAc,UAAVA,KAChBhB,KAAI,SAAAgB,GAAK,OAAIkC,WAAWlC,QAlBjC,6C,kEAsBA,WAA0BO,EAAMC,EAAQwB,EAAevB,GAAvD,+BAAAC,EAAA,sEAC2BC,MAAMJ,GADjC,cACUK,EADV,OAEUC,EAASD,EAASE,KAAKC,YAFjC,SAGyBF,EAAOG,OAHhC,OAGUC,EAHV,OAIUC,EAAU,IAAIC,YAAY,SAC1BC,EAAMF,EAAQG,OAAOJ,EAAOjB,OAC5BsB,EAAUC,IAAKC,MAAMJ,EAAK,CAAEK,QAAQ,IACpCC,EAAOJ,EAAQ/D,KAEjB4E,EAAW,GAAGC,OAAOC,MAAM,GAAIX,EAAK1C,KAAI,SAAA6C,GAAG,OAAIF,OAAOxE,KAAK0E,GAAK7C,KAAI,SAACC,EAASwB,GAAV,MAAqB,CACzFvD,KAAMyE,OAAOxE,KAAK0E,GAAKpB,GACvBT,MAAOkC,WAAWP,OAAOvE,OAAOyE,GAAKpB,IACrCqB,KAAMD,EAAG,SACTD,QAAO,SAAA3C,GAAO,MAAqB,SAAjBA,EAAQ/B,YAExBM,EAASmE,OAAOxE,KAAKuE,EAAK,IAAI1C,KAAI,SAACsD,EAAK7B,GAAN,OAAgB6B,KAAKV,QAAO,SAAAlE,GAAK,MAAc,SAAVA,KAC7E8C,EAAO,CACHrD,KAAMuE,EAAK1C,KAAI,SAAA6C,GAAG,OAAIA,EAAIU,QAC1B9E,SAAUD,EAAOwB,KAAI,SAAAtB,GAAK,MAAK,CAC3BR,KAAMQ,EACNN,OAAQ+E,EAASP,QAAO,SAAAC,GAAG,OAAIA,EAAI3E,OAASQ,KAAOsB,KAAI,SAAA6C,GAAG,OAAIA,EAAI7B,eApB9E,6C,kEAyBA,WAAgCO,EAAMC,EAAQwB,EAAevB,EAAOqB,GAApE,6BAAApB,EAAA,sEAC2BC,MAAMJ,GADjC,cACUK,EADV,OAEUC,EAASD,EAASE,KAAKC,YAFjC,SAGyBF,EAAOG,OAHhC,OAGUC,EAHV,OAIUC,EAAU,IAAIC,YAAY,SAC1BC,EAAMF,EAAQG,OAAOJ,EAAOjB,OAC5BsB,EAAUC,IAAKC,MAAMJ,EAAK,CAAEK,QAAQ,IACpCC,EAAOJ,EAAQ/D,KAGfA,EAAOmE,EAAKE,QAAO,SAAAC,GAAG,OAAIW,SAASX,EAAIU,QAAUT,KAAMF,QAAO,SAAAC,GAAG,MAA6D,KAAxDA,EAAI,iDAA6G,KAAnDA,EAAI,8CAC9IrB,EAAOjD,EAAKyB,KAAI,SAAAzB,GAAI,MAAK,CACrBG,MAAOH,EAAKkF,OACZlF,KAAM,CAAC8C,EAAG6B,WAAW3E,EAAK,iDAAkD+C,EAAG4B,WAAW3E,EAAK,kDAbvG,6C,kEAiBA,WACIgD,EACAC,EACAwB,EACAvB,GAJJ,6CAAAC,EAAA,yDAKIgC,EALJ,gCAMIC,EANJ,gCAOIC,EAPJ,gCASIZ,EAAcL,OAAOvE,OAAOmD,EAAKsC,WAAW7D,KAAI,SAAA8D,GAAM,OAAIA,EAAO5F,SAC3D6F,EAAsB,CAAC,mBAAoB,aAAc,QAAS,OAAQ,YAC1ExF,EAAOoE,OAAOvE,OAAOmD,EAAKyC,WAAWhE,KAAI,SAACiE,GAE5C,IAF0D,IAAD,EAa7B,EAZxBxF,EAAW,GACNyF,EAAI,EAAGA,EAAID,EAASE,SAASC,OAAQF,IAAK,CAC/C,IAAIG,EAAmBJ,EAASE,SAASD,GACzCzF,EAAS6F,KAAK,CACVxB,KAAMmB,EAASM,MAAML,GACrBlD,MAAOiD,EAAS7F,OAAO8F,GACvBjB,KAAM1B,EAAKsC,UAAUQ,GAAkBnG,OAM/C,OAFAO,EAAWA,EAASmE,QAAO,SAAA3C,GAAO,OAAKA,EAAQgD,OAASxB,GAASxB,EAAQ6C,KAAO,QAE3EY,EAaE,CACHxF,KAAM6F,EAAoBS,SAApB,UAA6BP,EAASQ,QAAQvG,YAA9C,QAAsD+F,EAAS/F,KAAKwG,MAAM,KAAK,IAAM,YAAc,gBACzGvG,KAAMM,EAASuB,KAAI,SAAAC,GAAO,OAAIA,EAAQ6C,QACtC1E,OAAQK,EAASuB,KAAI,SAAAC,GAAO,OAAIA,EAAQe,SACnChB,KAAI,SAAAgB,GAAK,OAAIA,GACViD,EAASQ,QAAQE,iBACXV,EAASQ,QAAQE,iBACjBV,EAASQ,QAAQvG,KAAO,EAAI,YAnBnC,CACHA,KAAI,UAAE+F,EAASQ,QAAQvG,YAAnB,QAA2B+F,EAAS/F,KAAKwG,MAAM,KAAK,GACxDvG,KAAMM,EAASuB,KAAI,SAAAC,GAAO,OAAIA,EAAQ6C,QACtC1E,OAAQK,EAASuB,KAAI,SAAAC,GAAO,OAAIA,EAAQe,SACnChB,KAAI,SAAAgB,GAAK,OAAIA,GACViD,EAASQ,QAAQE,iBACXV,EAASQ,QAAQE,iBACjBV,EAASQ,QAAQvG,KAAO,EAAI,eAiBjDwF,EAjDT,qBAkDYC,EAlDZ,wBAmDYnC,EAAOjD,EAAKqE,QAAO,SAAArE,GAAI,OAAIwF,EAAoBS,SAASjG,EAAKL,UAnDzE,+BAsDY0F,EAtDZ,wBAuDYpC,EAAOjD,EAAKqE,QAAO,SAAArE,GAAI,OAAKwF,EAAoBS,SAASjG,EAAKL,UAvD1E,kCA0DQsD,EAAOjD,GA1Df,2BA8DUqG,EAAarG,EAAKqE,QAAO,SAAA3C,GAAO,MAAqB,cAAjBA,EAAQ/B,QAC5C2G,EAAgBtG,EAAKqE,QAAO,SAAA3C,GAAO,MAAqB,kBAAjBA,EAAQ/B,QACjDC,EAAOI,EAAK,GAAGJ,KAEf2G,EAAkB,GACtBvG,EAAK,GAAGJ,KAAK4G,SAAQ,SAAC/D,EAAOsC,GACzBsB,EAAWG,SAAQ,SAAA9E,GACV6E,EAAgBxB,GAGjBwB,EAAgBxB,GAAOwB,EAAgBxB,GAAOrD,EAAQ7B,OAAOkF,GAF7DwB,EAAgBR,KAAKrE,EAAQ7B,OAAOkF,UAO5C0B,EAAqB,GACzBzG,EAAK,GAAGJ,KAAK4G,SAAQ,SAAC/D,EAAOsC,GACzBuB,EAAcE,SAAQ,SAAA9E,GACb+E,EAAmB1B,GAGpB0B,EAAmB1B,GAAO0B,EAAmB1B,GAAOrD,EAAQ7B,OAAOkF,GAFnE0B,EAAmBV,KAAKrE,EAAQ7B,OAAOkF,UAOnD9B,EAAO,CACH,CACItD,KAAM,YACNC,KAAMA,EACNC,OAAQ0G,GAEZ,CACI5G,KAAM,gBACNC,KAAMA,EACNC,OAAQ4G,KAjGpB,6C,+BAsGeC,E,oFAAf,WACI1D,EACAC,EACAwB,EACAvB,GAJJ,eAAAC,EAAA,sDAMIsB,EAAcL,OAAOvE,OAAOmD,EAAKsC,WAAW7D,KAAI,SAAA8D,GAAM,OAAIA,EAAO5F,SAmBjEK,GAlBIA,EAAOoE,OAAOvE,OAAOmD,EAAKyC,WAAWhE,KAAI,SAACiE,GAE1C,IADA,IAAIxF,EAAW,GACNyF,EAAI,EAAGA,EAAID,EAASE,SAASC,OAAQF,IAAK,CAC/C,IAAIG,EAAmBJ,EAASE,SAASD,GACzCzF,EAAS6F,KAAK,CACVxB,KAAMmB,EAASM,MAAML,GACrBlD,MAAOiD,EAAS7F,OAAO8F,GACvBjB,KAAM1B,EAAKsC,UAAUQ,GAAkBnG,OAI/C,MAAO,CACHA,KAAMO,EAASuB,KAAI,SAAAC,GAAO,OAAIA,EAAQgD,QACtC9E,KAAMM,EAASuB,KAAI,SAAAC,GAAO,OAAIA,EAAQ6C,QACtC1E,OAAQK,EAASuB,KAAI,SAAAC,GAAO,OAAIA,EAAQe,cAIpC,GAAG9C,KAAK8B,KAAI,SAACsD,EAAK7B,GAAN,MAAiB,CACrCvD,KAAMK,EAAK,GAAGL,KAAKuD,GACnBtD,KAAMI,EAAK,GAAGJ,KAAKsD,GACnBT,MAAOzC,EAAK,GAAGH,OAAOqD,OAE1BlD,EAAOoE,OAAOvE,OAAOmD,EAAKsC,WAAW7D,KAAI,SAAA8D,GAAM,OAAIvF,EAAKqE,QAAO,SAAA3C,GAAO,OAAIA,EAAQ/B,OAAS4F,EAAO5F,WAElGsD,EAAOjD,EAAKyB,KAAI,SAAAC,GACZ,IAAI/B,EAAO+B,EAAQ,GAAG/B,KAClBC,EAAO,GACPC,EAAS,GAOb,OALA6B,EAAQ8E,SAAQ,SAAC/D,EAAOS,GACpBtD,EAAKmG,KAAKtD,EAAM7C,MAChBC,EAAOkG,KAAKtD,EAAMA,UAGf,CACH9C,KAAMA,EACNC,KAAMA,EACNC,OAAQA,OA7CpB,4C,sBAkDA,IAAM8G,EAAe,SAAC7G,EAAS8G,EAAU1D,GACrC,OACI,kBAAC2D,EAAA,EAAD,CACIC,KAAK,QACLhH,QAASA,EACTiH,eAAgB,SAACC,GAAD,OAAYA,EAAOC,YACnCC,aAAchE,EACdiE,WAAW,EACXC,SACI,SAACC,EAAO5E,GAAR,OAAkBmE,EAAmB,OAAVnE,EAAiB3C,EAAQA,EAAQ+F,OAAS,GAAKpD,IAE9E6E,YAAa,SAACC,GAAD,OACT,kBAACC,EAAA,EAAD,iBACQD,EADR,CAEIJ,WAAW,EACXM,UAAW,iBACXC,MAAO,CAACC,MAAQ,KAAQC,MAAM1E,EAAM2C,QAAkC,GAA/C,SAAwB3C,EAAM2C,OAAU,OAC/D1F,MAAOL,EAAQoD,GACf2E,YAAa/H,EAAQoD,UAyxB1B4E,MAlxBf,WAAgB,IAAD,EACmBC,IAAMC,UAAS,GADlC,mBACJC,EADI,KACKC,EADL,OAGiDH,IAAMC,SAAS,SAHhE,mBAGJG,EAHI,KAGoBC,EAHpB,OAIqCL,IAAMC,SAAS,CAACpI,KAAM,GAAIC,OAAQ,KAJvE,mBAINwI,EAJM,KAIaC,EAJb,OAKuDP,IAAMC,SAAS,IALtE,mBAKNO,EALM,KAKsBC,EALtB,OAOyDT,IAAMC,SAAS,SAPxE,mBAONS,EAPM,KAOuBC,EAPvB,OAQ+CX,IAAMC,SAAS,CAACpI,KAAM,GAAIC,OAAQ,KARjF,mBAQN8I,EARM,KAQkBC,EARlB,OASiEb,IAAMC,SAAS,IAThF,mBASNa,EATM,KAS2BC,GAT3B,QAWqEf,IAAMC,SAAS,SAXpF,qBAWJe,GAXI,MAW8BC,GAX9B,SAY2DjB,IAAMC,SAAS,CAACpI,KAAM,GAAIC,OAAQ,KAZ7F,qBAYJoJ,GAZI,MAYyBC,GAZzB,SAa6EnB,IAAMC,SAAS,IAb5F,qBAaJmB,GAbI,MAakCC,GAblC,SAe6CrB,IAAMC,SAAS,SAf5D,qBAeJqB,GAfI,MAekBC,GAflB,SAgBmCvB,IAAMC,SAAS,CAACpI,KAAM,GAAIC,OAAQ,KAhBrE,qBAgBJ0J,GAhBI,MAgBaC,GAhBb,SAiBqDzB,IAAMC,SAAS,IAjBpE,qBAiBJyB,GAjBI,MAiBsBC,GAjBtB,SAmBmD3B,IAAMC,SAAS,SAnBlE,qBAmBJ2B,GAnBI,MAmBqBC,GAnBrB,SAoByD7B,IAAMC,SAAS,IApBxE,qBAoBJ6B,GApBI,MAoBwBC,GApBxB,SAqB2D/B,IAAMC,SAAS,IArB1E,qBAqBJ+B,GArBI,MAqByBC,GArBzB,SAsBiDjC,IAAMC,SAAS,MAtBhE,qBAsBJiC,GAtBI,MAsBoBC,GAtBpB,SAuBmDnC,IAAMC,UAAS,GAvBlE,qBAuBJmC,GAvBI,MAuBqBC,GAvBrB,SAwBiErC,IAAMC,UAAS,GAxBhF,qBAwBJqC,GAxBI,MAwB4BC,GAxB5B,SAyBqEvC,IAAMC,UAAS,GAzBpF,qBAyBJuC,GAzBI,MAyB8BC,GAzB9B,SA0B2EzC,IAAMC,UAAS,GA1B1F,qBA0BJyC,GA1BI,MA0BiCC,GA1BjC,SA4BiE3C,IAAMC,SAAS,SA5BhF,qBA4BJ2C,GA5BI,gBA6BuE5C,IAAMC,SAAS,KA7BtF,qBA6BJ4C,GA7BI,MA6B+BC,GA7B/B,SA8ByE9C,IAAMC,SAAS,IA9BxF,qBA8BgC8C,IA9BhC,gBAgCqF/C,IAAMC,SAAS,SAhCpG,qBAgCJ+C,GAhCI,gBAiC2FhD,IAAMC,SAAS,KAjC1G,qBAiCJgD,GAjCI,MAiCyCC,GAjCzC,SAkC6FlD,IAAMC,SAAS,IAlC5G,qBAkC0CkD,IAlC1C,gBAoCyFnD,IAAMC,SAAS,SApCxG,qBAoCJmD,GApCI,gBAqCoGpD,IAAMC,SAAS,KArCnH,qBAqCJoD,GArCI,MAqCgDC,GArChD,SAsCsGtD,IAAMC,SAAS,IAtCrH,qBAsCiDsD,IAtCjD,gBAwCqEvD,IAAMC,SAAS,SAxCpF,qBAwCJuD,GAxCI,gBAyC2ExD,IAAMC,SAAS,KAzC1F,qBAyCJwD,GAzCI,MAyCiCC,GAzCjC,SA0C6E1D,IAAMC,SAAS,IA1C5F,qCA2CmED,IAAMC,SAAS,OA3ClF,qBA2CJ0D,GA3CI,gBA6CuE3D,IAAMC,SAAS,OA7CtF,qCA8C+ED,IAAMC,SAAS,KA9C9F,qBA8CJ2D,GA9CI,MA8CmCC,GA9CnC,MAgDLC,GAAuB,WACzBrH,EAAesH,IAA4BlD,EAA2BE,GAAoCL,IAExGsD,GAAkB,WACpBvH,EAAewH,IAAuB1D,EAAsBE,EAA+BL,IAEzF8D,GAA4B,WAC9BzH,EAAe0H,IAAiChD,GAAgCE,GAAyCL,KAEvHoD,GAAqB,WACvB3H,EAAe4H,IAAqB5C,GAAoBE,GAA6BL,KAGnFgD,GAAmC,Y,wCACrCC,CAAcC,IAAmCX,KAG/CY,GAAwB,Y,0CAC1BC,CACIC,EACA5C,GACAE,GACAL,GACAQ,GACAI,GACAE,KAaFkC,GAA2C,Y,0CAC7CC,CACIC,IACAxB,GACAC,GACAH,KAIF2B,GAAiC,Y,4CACnCC,CACIC,IACAvB,GACAzB,GACAuB,GACAG,KAaV3D,IAAMkF,WAAU,WACZpB,KACAE,KACAE,KACAE,KACAK,KAzCE9F,EACIwG,EACArC,GACAC,GACAH,IAwBJjE,EACIyG,EACAlC,GACAC,GACAH,IAYN4B,KACAG,KACAT,KACAe,OACD,IAEHrF,IAAMkF,WAAU,WACZpB,OACD,CAACpD,IAEJV,IAAMkF,WAAU,WACZlB,OACD,CAAC5D,IAEFJ,IAAMkF,WAAU,WACZhB,OACD,CAAClD,KAEJhB,IAAMkF,WAAU,WACZd,OACD,CAAC9C,KAEJtB,IAAMkF,WAAU,WACZT,OACD,CAAC7C,GAAyBQ,GAAyBI,GAAkCE,KAExF,IAAM2C,GAAqB,WACvBC,YAAW,WACPnF,GAAW,KACZ,OAGDoF,GAAe,WACnB,IAAIC,GAAW,EAOb,MANoB,CAACtE,GAA6BN,EAAwBN,EAAmBkB,IACjF/C,SAAQ,SAAAxG,GACS,IAAvBA,EAAKH,OAAOgG,SACZ0H,GAAW,MAGVA,GAIb,OADEC,QAAQC,IAAI9B,IAEV,sCACG2B,MAAkBrF,IACrB,yBAAKR,UAAU,cACX,yBAAKA,UAAW,sBACZ,0BAAMA,UAAW,QAAQ,4DACzB,yBAAKA,UAAU,gBAIrB6F,OAAmBrF,GACnB,oCACI,yBAAKR,UAAU,+BACX,yBAAKA,UAAU,qCACX,yBAAKA,UAAU,YACX,0BAAMA,UAAW,YAAaiG,QAAS,kBAAMC,OAAOC,SAASC,QAAO,KAAQ,0CAEhF,yBAAKpG,UAAW,YACZ,0BAAMA,UAAW,YAAjB,uBAIZ,yBAAKA,UAAU,SACjB,yBAAKA,UAAU,+BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,wBAAIA,UAAW,qCAAf,eACA,gFACA,+FAIV,yBAAKA,UAAU,SACjB,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,qCACnB,0BAAMA,UAAW,QAAjB,iCACgC,0CADhC,QAGSd,EAAakC,EAAiCH,EAAgCD,GAC/E,0BAAMhB,UAAW,QAAjB,mBAMZ,yBAAKA,UAAU,+BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,iBACX,kBAAC,EAAD,CACI9H,KAAK,2BACLC,KAAM+I,EAAuB/I,KAC7BC,OAAQ8I,EAAuB9I,OAC/BC,QAAS,CACLoC,QAAS,CACLjC,QAAQ,EACRkC,YAAY,GAEhB2L,OAAQ,CACJC,MAAO,CAAC,CACJC,MAAO,CACHC,aAAa,EACbC,aAAc,QAI1BC,OAAQ,CACJjI,SAAS,UASrC,yBAAKuB,UAAU,0BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,wFAA6D,+CAA7D,YACA,4FAIZ,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,qCACnB,0BAAMA,UAAW,QAAjB,oDAGSd,EAAawC,GAAsCH,GAAqCD,OAIrG,yBAAKtB,UAAU,+BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,iBAEf,kBAAC,EAAD,CACA9H,KAAK,gCACLC,KAAMqJ,GAA4BrJ,KAClCC,OAAQoJ,GAA4BpJ,OACpCC,QAAS,CACLoC,QAAS,CACLjC,QAAQ,EACRkC,YAAY,GAEhB2L,OAAQ,CACJC,MAAO,CAAC,CACJC,MAAO,CACHC,aAAa,EACbC,aAAc,QAI1BC,OAAQ,CACJjI,SAAS,IAGjBnG,MAAM,oBAMlB,yBAAK0H,UAAU,0BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,sCAAW,0CAAX,YACA,yGAA8E,iDAA9E,qBAIZ,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,qCACnB,0BAAMA,UAAW,QAAjB,oCAGSd,EAAa4B,EAA4BH,EAA2BD,MAIjF,yBAAKV,UAAU,+BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,iBAEf,kBAAC,EAAD,CACI9H,KAAK,sBACLC,KAAMyI,EAAkBzI,KACxBC,OAAQwI,EAAkBxI,OAC1BC,QAAS,CACLoC,QAAS,CACLjC,QAAQ,EACRkC,YAAY,GAEhB2L,OAAQ,CACJC,MAAO,CAAC,CACJC,MAAO,CACHC,aAAa,EACbC,aAAc,QAI1BC,OAAQ,CACJjI,SAAS,IAGjBnG,MAAO,gBAOvB,yBAAK0H,UAAU,0BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,yCAAc,qCAAd,eACA,uCAAY,oDAAZ,QAIZ,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,qCACnB,0BAAMA,UAAW,QAAjB,uCAGSd,EAAa8C,GAA0BH,GAAyBD,OAI3E,yBAAK5B,UAAU,+BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,iBAEf,kBAAC,EAAD,CACR9H,KAAK,mBACLC,KAAM2J,GAAgB3J,KACtBC,OAAQ0J,GAAgB1J,OACxBC,QAAS,CACLoC,QAAS,CACLjC,QAAQ,EACRkC,YAAY,GAEhB2L,OAAQ,CACJC,MAAO,CAAC,CACJC,MAAO,CACHC,aAAa,EACbC,aAAc,QAI1BC,OAAQ,CACJjI,SAAS,IAGjBnG,MAAO,gBAMX,yBAAK0H,UAAU,0BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,4FAIZ,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,qCACrB,0BAAMA,UAAW,QAAjB,mDAGWd,EAAaoD,GAA6BH,GAA4BD,OAIrF,yBAAKlC,UAAU,+BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,iBAEf,kBAAC2G,EAAA,EAAD,CAAW9J,KAAG,GACV,kBAAC+J,EAAA,EAAD,CACIC,QACI,kBAACC,EAAA,EAAD,CACIC,QAASrE,GACT/C,SAAU,WACNgD,IAA6BD,IAC7BO,IAAuC,GACvCF,IAAoC,IAExC7K,KAAK,0BACLI,MAAM,YAGdI,MAAM,oCAEV,kBAACkO,EAAA,EAAD,CACIC,QACI,kBAACC,EAAA,EAAD,CACIC,QAASjE,GACTnD,SAAU,WACNoD,IAAsCD,IACtCG,IAAuC,GACvCN,IAA2B,IAE/BzK,KAAK,8BACLI,MAAM,YAGdI,MAAM,oBAEV,kBAACkO,EAAA,EAAD,CACIC,QACI,kBAACC,EAAA,EAAD,CACIC,QAAS/D,GACTrD,SAAU,WACNsD,IAAyCD,IACzCD,IAAoC,GACpCJ,IAA2B,IAE/BzK,KAAK,iCACLI,MAAM,YAGdI,MAAM,wBAEV,kBAACkO,EAAA,EAAD,CACIC,QACI,kBAACC,EAAA,EAAD,CACIC,QAASnE,GACTjD,SAAU,kBAAMkD,IAAoCD,KACpD1K,KAAK,iCACLI,MAAM,YAGdI,MAAM,kBAETkK,IACD,oCACK1D,EAAakD,GAA2B,GAAGjK,KAAMsK,GAA2BD,MAIpFI,IACG,kBAAC,EAAD,CACI1K,KAAK,mBACLO,SAAU2J,GAA2BpI,KAAI,SAAAC,GACrC,IA5uBX+M,EAAOhM,EA4uBUS,GA5uBjBuL,EA4uBuC/M,EAAQ9B,KA5uBxC6C,EA4uB8CwH,GA3uBjEwE,EAAMC,WAAU,SAAAC,GAAU,OAAIA,IAAelM,MA4uBtB,MAAO,CACH9C,KAAM+B,EAAQ/B,KACdoF,IAAKrD,EAAQ9B,KAAKsD,GAClBT,MAAOf,EAAQ7B,OAAOqD,OAG9BpD,QAAS,CACLoC,QAAS,CACLjC,QAAQ,EACRkC,YAAY,GAEhB2L,OAAQ,CACJC,MAAO,CAAC,CACJa,SAAS,EACTZ,MAAO,MAIfG,OAAQ,OAMlB9D,IACF,kBAAC,EAAD,CACI1K,KAAK,mBACLO,SAAU2J,GACV/J,QAAS,CACLoC,QAAS,CACLjC,QAAQ,EACRkC,YAAY,GAEhB2L,OAAQ,CACJC,MAAO,CAAC,CACJa,SAAS,EACTZ,MAAO,MAIfG,OAAQ,CACJU,SAAU,QACVC,SAAS,UAU/B,yBAAKrH,UAAU,0BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,4DACA,mDAAwB,8CAAxB,QAIZ,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,qCACrB,0BAAMA,UAAW,QAAjB,gEAMF,yBAAKA,UAAU,+BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,iBACX,kBAAC,EAAD,CACI9H,KAAK,mBACLO,SAAU0K,GACV9K,QAAS,CACLoC,QAAS,CACLjC,QAAQ,EACRkC,YAAY,GAEhB2L,OAAQ,CACJC,MAAO,CAAC,CACJa,SAAS,EACTZ,MAAO,MAIfG,OAAQ,CACJU,SAAU,QACVC,SAAS,UASrC,yBAAKrH,UAAU,0BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,8FACA,wEAA6C,+CAA7C,UAIZ,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,qCACrB,0BAAMA,UAAW,QAAjB,qFAMF,yBAAKA,UAAU,+BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,iBACX,kBAAC,EAAD,CACI9H,KAAK,mBACLO,SAAU8K,GAA4CvJ,KAAI,SAAAC,GACtD,MAAO,CACH/B,KAAM+B,EAAQ/B,KACdoF,IAAKrD,EAAQ9B,KAAK,GAClB6C,MAAOf,EAAQ7B,OAAO,OAG9BC,QAAS,CACLoC,QAAS,CACLjC,QAAQ,EACRkC,YAAY,GAEhB2L,OAAQ,CACJC,MAAO,CAAC,CACJa,SAAS,EACTZ,MAAO,MAIfG,OAAQ,CACJU,SAAU,QACVC,SAAS,UASrC,yBAAKrH,UAAU,0BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,qHAIZ,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,qCACrB,0BAAMA,UAAW,QAAjB,2DAC0D,kDAK5D,yBAAKA,UAAU,+BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,iBACX,kBAAC,EAAD,CACIvH,SAAUkL,GACVtL,QAAS,CACLoC,QAAS,CACLjC,QAAQ,EACRkC,YAAY,GAEhBgM,OAAQ,GAERL,OAAQ,CACJiB,MAAO,CAAC,CACJH,SAAS,IAEbb,MAAO,CAAC,CACJa,SAAS,YAUzC,yBAAKnH,UAAU,0BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,8LAIZ,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,qCACrB,0BAAMA,UAAW,QAAjB,oFACmF,+CAKrF,yBAAKA,UAAU,+BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,iBACX,kBAAC,EAAD,CACIvH,SAAUsL,GACV1L,QAAS,CACLoC,QAAS,CACLC,WAAY,CACR6M,OAAQ,SAAUC,GACd,IAAIxM,EAAQwM,EAAQvN,QAAQ1B,KAAKiP,EAAQC,WACzC,OAAQzM,EAAMK,EAAI,KAASL,EAAMK,EAAI,KAAQL,EAAMM,EAAI,EAAM,MAAQ,UAEzEoM,MAAO,SAAUF,GACb,IAAIxM,EAAQwM,EAAQvN,QAAQ1B,KAAKiP,EAAQC,WACzC,OAAQzM,EAAMK,EAAI,KAASL,EAAMK,EAAI,KAAQL,EAAMM,EAAI,EAAM,MAAQ,UAEzEhD,MAAO,SAAUkP,GACb,IAAIxM,EAAQwM,EAAQvN,QAAQ1B,KAAKiP,EAAQC,WACzC,OAAQzM,EAAMK,EAAI,KAASL,EAAMK,EAAI,KAAQL,EAAMM,EAAI,EAAMkM,EAAQvN,QAAQpB,gBAAkB,IAEnG8O,KAAM,CACFC,OAAQ,QAEZC,UAAW,SAAU7M,EAAOwM,GACxB,OAAOA,EAAQvN,QAAQvB,OAE3BoP,OAAQ,EACRC,QAAS,WAUzC,yBAAK/H,UAAU,0BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,oDAAyB,0CAAzB,2BAIZ,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,qCACrB,0BAAMA,UAAW,QAAjB,wEAMF,yBAAKA,UAAU,+BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,iBACX,kBAAC,EAAD,CACI9H,KAAK,oCACLO,SAAUyL,GACV7L,QAAS,CACLoC,QAAS,CACLjC,QAAQ,EACRkC,YAAY,GAEhB2L,OAAQ,CACJC,MAAO,CAAC,CACJa,SAAS,EACTZ,MAAO,MAIfG,OAAQ,CACJU,SAAU,QACVC,SAAS,aCzhC7BW,QACW,cAA7B9B,OAAOC,SAAS8B,UAEe,UAA7B/B,OAAOC,SAAS8B,UAEhB/B,OAAOC,SAAS8B,SAASC,MACvB,2DCZNC,IAASxN,OACP,kBAAC,IAAMyN,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,a,mBEzI5BC,EAAOC,QAAU,IAA0B,sD,mBCA3CD,EAAOC,QAAU,IAA0B,iD,mBCA3CD,EAAOC,QAAU,IAA0B,2D,mBCA3CD,EAAOC,QAAU,IAA0B,8C,gzs4BCA3CD,EAAOC,QAAU,IAA0B,0E,mBCA3CD,EAAOC,QAAU,IAA0B,6F,mBCA3CD,EAAOC,QAAU,IAA0B,gE","file":"static/js/main.a02b25ee.chunk.js","sourcesContent":["import React from 'react';\nimport {Line as ChartLine} from 'react-chartjs-2';\n\nconst Line = ({name, keys, values, options = {}, color = '75,192,192'}) => (\n    <ChartLine\n        options={options}\n        data={{\n            labels: keys,\n            datasets: [\n                {\n                    label: name,\n                    // fill: false,\n                    lineTension: 0.1,\n                    displayColors: false,\n                    backgroundColor: `rgba(${color},0.6)`,\n                    borderColor: `rgba(${color},1)`,\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: `rgba(${color},1)`,\n                    pointBackgroundColor: '#fff',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: `rgba(${color},1)`,\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    data: values\n                }\n            ]\n        }} />\n)\nexport default Line;","import React from 'react';\nimport {Line as ChartLine} from 'react-chartjs-2';\n\nfunction getRandomColor() {\n    var o = Math.round, r = Math.random, s = 255;\n    return o(r()*s) + ',' + o(r()*s) + ',' + o(r()*s);\n}\n\n\nconst MultipleLines = ({datasets, options = {}}) => {\n    const datasetsValues = (Array.isArray(datasets)) ? datasets : datasets.values\n\n    return (\n    <ChartLine\n        options={options}\n        data={{\n            labels: datasets[0] ? datasets[0].keys : datasets.keys,\n            datasets: datasetsValues.map(dataset => {\n                const color = getRandomColor()\n                return {\n                    label: dataset.name,\n                    // fill: false,\n                    lineTension: 0.1,\n                    displayColors: false,\n                    backgroundColor: `rgba(${color},0.6)`,\n                    borderColor: `rgba(${color},1)`,\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: `rgba(${color},1)`,\n                    pointBackgroundColor: `rgba(${color},1)`,\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: `rgba(${color},1)`,\n                    pointHoverBorderColor: `rgba(${color},1)`,\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 1000,\n                    data: dataset.values\n                }\n            })\n        }}/>\n    )\n}\nexport default MultipleLines;","import React from 'react';\nimport {Doughnut as ChartDoughnut} from 'react-chartjs-2';\nimport 'chartjs-plugin-labels';\n\nfunction getRandomColor() {\n    var o = Math.round, r = Math.random, s = 255;\n    return o(r()*s) + ',' + o(r()*s) + ',' + o(r()*s);\n}\n\n\nconst Doughnut = ({datasets, options = {}}) => (\n    <ChartDoughnut\n        options={{\n            plugins: {\n                datalabels: false,\n                labels: {\n                    render: 'label',\n                    fontSize: 14,\n                    fontStyle: 'bold',\n                    fontColor: '#000',\n                    fontFamily: '\"Lucida Console\", Monaco, monospace'\n                }\n            }\n        }}\n        data={{\n            labels: datasets.map(dataset => dataset.name),\n            datasets: [{\n                data: datasets.map(dataset => dataset.value),\n                backgroundColor: datasets.map(() => `rgba(${getRandomColor()},0.6)`)\n            }]\n        }} />\n)\nexport default Doughnut;","import React from 'react';\nimport Bar from 'react-chartjs-2';\nimport 'chartjs-plugin-labels';\n\nfunction getRandomColor() {\n    var o = Math.round, r = Math.random, s = 255;\n    return o(r()*s) + ',' + o(r()*s) + ',' + o(r()*s);\n}\n\nconst MultipleBars = ({datasets, options = {}}) => {\n    return (\n        <Bar\n            type={'bar'}\n            options={options}\n            data={{\n                labels: datasets.keys,\n                datasets: datasets.datasets.map(dataset => {\n                const label = dataset.name\n\n                return {\n                    label: label,\n                    stack: 2,\n                    data: dataset.values,\n                    backgroundColor: `rgba(${getRandomColor()},0.6)`\n                }})\n            }} />\n    )}\nexport default MultipleBars;","import React from 'react';\nimport {Bubble as ChartBubble} from 'react-chartjs-2';\nimport 'chartjs-plugin-labels';\nimport 'chartjs-plugin-datalabels';\n\nfunction getRandomColor() {\n    var o = Math.round, r = Math.random, s = 255;\n    return o(r()*s) + ',' + o(r()*s) + ',' + o(r()*s);\n}\n\nconst Bubble = ({datasets, options = {}}) => (\n    <ChartBubble\n        options={options}\n        data={{\n            labels: datasets.map(data => data.label),\n            datasets: datasets.map(dataset => {\n                return {\n                    label: dataset.label,\n                    backgroundColor: `rgba(${getRandomColor()},0.4)`,\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    data: [{x: dataset.data.x, y: dataset.data.y, r: 5}]\n                }\n            })\n        }} />\n)\nexport default Bubble;","import React from 'react';\nimport './App.css';\nimport Papa from 'papaparse'\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\n\nimport totalEnergyConsumptionData from './Dataset/total_energy_consumption.csv';\nimport totalco2EmissionsData from './Dataset/total_co2_emissions.csv';\nimport totalElectricityConsumptionData from './Dataset/total_electricity_consumption.csv';\nimport renewablesShareData from './Dataset/renewables_share.csv';\nimport energySupplySource from './Dataset/energy_supply_source.json';\nimport renewableEnergyInvestment from './Dataset/renewable_energy_investment.json';\nimport renewableEnergyInvestmentPercentage from './Dataset/renewable_energy_investment_percentage.json';\nimport renewableEnergyInvestmentByTechnology from './Dataset/investment-in-renewable-energy-by-technology.csv';\nimport energyUsePerCapitaVsPoverty from './Dataset/energy-use-per-capita-vs-share-of-population-in-extreme-poverty.csv';\nimport totalFinalConsumptionBySectorData from './Dataset/total_final_consumption_by_sector.csv';\nimport Line from \"./UI/components/Line\";\nimport MultipleLines from \"./UI/components/MultipleLines\";\nimport Doughnut from \"./UI/components/Doughnut\";\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport MultipleBars from \"./UI/components/MultipleBars\";\nimport Bubble from \"./UI/components/Bubble\";\n\nfunction getKeyByValue(array, value) {\n    return array.findIndex(arrayValue => arrayValue === value);\n}\n\nasync function getIaeDataCsv(file, setter, index) {\n    const response = await fetch(file)\n    const reader = response.body.getReader()\n    const result = await reader.read() // raw array\n    const decoder = new TextDecoder('utf-8')\n    const csv = decoder.decode(result.value) // the csv text\n    const results = Papa.parse(csv, { header: true }) // object with { data, errors, meta }\n    const rows = results.data // array of objects\n\n    const values = Object.keys(rows[0]).filter(row => row !== 'year')\n    setter({\n        keys: rows.map(row => row.year)\n        ,\n        values: values.filter(value => value !== 'Units').map(value => ({\n            name: value,\n            values: rows.map(row => row[value])\n        }))\n    })\n}\n\nasync function getEnerdataCsv(file, setter, countrySetter, index) {\n  const response = await fetch(file)\n  const reader = response.body.getReader()\n  const result = await reader.read() // raw array\n  const decoder = new TextDecoder('utf-8')\n  const csv = decoder.decode(result.value) // the csv text\n  const results = Papa.parse(csv, { header: true }) // object with { data, errors, meta }\n  const rows = results.data // array of objects\n\n  countrySetter(rows.map(row => row.zone));\n  setter({\n    keys: Object\n        .keys(rows.filter(data => data.zone === index)[0])\n        .filter(data => data !== 'zone')\n    ,\n    values: Object\n        .values(rows.filter(data => data.zone === index)[0])\n        .filter(value => value !== 'World')\n        .map(value => parseFloat(value))\n  })\n}\n\nasync function getOwidCsv(file, setter, countrySetter, index) {\n    const response = await fetch(file)\n    const reader = response.body.getReader()\n    const result = await reader.read() // raw array\n    const decoder = new TextDecoder('utf-8')\n    const csv = decoder.decode(result.value) // the csv text\n    const results = Papa.parse(csv, { header: true }) // object with { data, errors, meta }\n    const rows = results.data // array of objects\n\n    let rowsData = [].concat.apply([], rows.map(row => Object.keys(row).map((dataset, index) => ({\n        name: Object.keys(row)[index],\n        value: parseFloat(Object.values(row)[index]),\n        year: row['Year']\n    })).filter(dataset => dataset.name !== 'Year')));\n\n    const labels = Object.keys(rows[0]).map((key, index) => key).filter(label => label !== 'Year')\n    setter({\n        keys: rows.map(row => row.Year),\n        datasets: labels.map(label => ({\n            name: label,\n            values: rowsData.filter(row => row.name === label).map(row => row.value)\n        }))\n    })\n}\n\nasync function getOwidBubbleCsv(file, setter, countrySetter, index, year) {\n    const response = await fetch(file)\n    const reader = response.body.getReader()\n    const result = await reader.read() // raw array\n    const decoder = new TextDecoder('utf-8')\n    const csv = decoder.decode(result.value) // the csv text\n    const results = Papa.parse(csv, { header: true }) // object with { data, errors, meta }\n    const rows = results.data // array of objects\n\n\n    const data = rows.filter(row => parseInt(row.Year) === year).filter(row => (row['Energy use (kg of oil equivalent per capita)'] !== '' && row['Poverty - $1.90 a day (% of population)'] !== ''))\n    setter(data.map(data => ({\n        label: data.Entity,\n        data: {x: parseFloat(data['Energy use (kg of oil equivalent per capita)']), y: parseFloat(data['Poverty - $1.90 a day (% of population)'])}\n    })))\n}\n\nasync function getOwidJson(\n    file,\n    setter,\n    countrySetter,\n    index,\n    showRenewableCategory = false,\n    showOnlyRenewableCategories = false ,\n    showOnlyNonRenewableCategories = false\n) {\n    countrySetter(Object.values(file.entityKey).map(entity => entity.name))\n    const renewableCategories = ['Other renewables', 'Hydropower', 'Solar', 'Wind', 'Biofuels'];\n    const data = Object.values(file.variables).map((variable) => {\n        let datasets = [];\n        for (let i = 0; i < variable.entities.length; i++) {\n            let countryEntityKey = variable.entities[i]\n            datasets.push({\n                year: variable.years[i],\n                value: variable.values[i],\n                zone: file.entityKey[countryEntityKey].name\n            })\n        }\n\n        datasets = datasets.filter(dataset => (dataset.zone === index && dataset.year > 1970))\n\n        if (!showRenewableCategory) {\n            return {\n                name: variable.display.name ?? variable.name.split(' ')[0],\n                keys: datasets.map(dataset => dataset.year),\n                values: datasets.map(dataset => dataset.value)\n                    .map(value => value * (\n                        variable.display.conversionFactor\n                            ? variable.display.conversionFactor\n                            : variable.display.name ? 1 : 277.78)\n                    )\n            }\n        }\n\n        return {\n            name: renewableCategories.includes(variable.display.name ?? variable.name.split(' ')[0]) ? 'Renewable' : 'Non renewable',\n            keys: datasets.map(dataset => dataset.year),\n            values: datasets.map(dataset => dataset.value)\n                .map(value => value * (\n                    variable.display.conversionFactor\n                        ? variable.display.conversionFactor\n                        : variable.display.name ? 1 : 277.78)\n                )\n        }\n    })\n\n    if (!showRenewableCategory) {\n        if (showOnlyRenewableCategories) {\n            setter(data.filter(data => renewableCategories.includes(data.name)))\n            return;\n        }\n        if (showOnlyNonRenewableCategories) {\n            setter(data.filter(data => !renewableCategories.includes(data.name)))\n            return;\n        }\n        setter(data)\n        return;\n    }\n\n    const renewables = data.filter(dataset => dataset.name === 'Renewable');\n    const nonRenewables = data.filter(dataset => dataset.name === 'Non renewable');\n    let keys = data[0].keys;\n\n    let renewableValues = [];\n    data[0].keys.forEach((value, key) => {\n        renewables.forEach(dataset => {\n            if (!renewableValues[key]) {\n                renewableValues.push(dataset.values[key])\n            } else {\n                renewableValues[key] = renewableValues[key] + dataset.values[key]\n            }\n        })\n    });\n\n    let nonRenewableValues = [];\n    data[0].keys.forEach((value, key) => {\n        nonRenewables.forEach(dataset => {\n            if (!nonRenewableValues[key]) {\n                nonRenewableValues.push(dataset.values[key])\n            } else {\n                nonRenewableValues[key] = nonRenewableValues[key] + dataset.values[key]\n            }\n        })\n    });\n\n    setter([\n        {\n            name: 'Renewable',\n            keys: keys,\n            values: renewableValues\n        },\n        {\n            name: 'Non renewable',\n            keys: keys,\n            values: nonRenewableValues\n        }\n    ])\n}\n\nasync function getOwidJson2(\n    file,\n    setter,\n    countrySetter,\n    index\n) {\n    countrySetter(Object.values(file.entityKey).map(entity => entity.name))\n    let data = Object.values(file.variables).map((variable) => {\n        let datasets = [];\n        for (let i = 0; i < variable.entities.length; i++) {\n            let countryEntityKey = variable.entities[i]\n            datasets.push({\n                year: variable.years[i],\n                value: variable.values[i],\n                zone: file.entityKey[countryEntityKey].name\n            })\n        }\n\n        return {\n            name: datasets.map(dataset => dataset.zone),\n            keys: datasets.map(dataset => dataset.year),\n            values: datasets.map(dataset => dataset.value)\n        }\n    })\n\n    data = data[0].name.map((key, index) => ({\n        name: data[0].name[index],\n        keys: data[0].keys[index],\n        value: data[0].values[index]\n    }))\n    data = Object.values(file.entityKey).map(entity => data.filter(dataset => dataset.name === entity.name))\n\n    setter(data.map(dataset => {\n        let name = dataset[0].name\n        let keys = []\n        let values = []\n\n        dataset.forEach((value, index) => {\n            keys.push(value.keys)\n            values.push(value.value)\n        })\n\n        return {\n            name: name,\n            keys: keys,\n            values: values\n        }\n    }))\n}\n\nconst autoComplete = (options, setIndex, index) => {\n    return (\n        <Autocomplete\n            size=\"small\"\n            options={options}\n            getOptionLabel={(option) => option.toString()}\n            defaultValue={index}\n            fullWidth={false}\n            onChange={\n                (event, value) => setIndex(value === null ? options[options.length - 1] : value)\n            }\n            renderInput={(params) => (\n                <TextField\n                    {...params}\n                    fullWidth={false}\n                    className={\"widthTranslate\"}\n                    style={{width: (100 + (!isNaN(index.length) ? (index.length ** 1.7) : 10))}}\n                    label={options[index]}\n                    placeholder={options[index]}\n                />\n            )}\n        />\n    )\n}\n\nfunction App() {\n    const [loading, setLoading] = React.useState(true)\n\n    const [totalCo2EmmisionsIndex, setTotalCo2EmmisionsIndex] = React.useState('World')\n  const [totalCo2Emmisions, setTotalCo2Emmisions] = React.useState({keys: [], values: []})\n  const [totalCo2EmmisionsCountries, setTotalCo2EmmisionsCountries] = React.useState([])\n\n  const [totalEnergyConsumptionIndex, setTotalEnergyConsumptionIndex] = React.useState('World')\n  const [totalEnergyConsumption, setTotalEnergyConsumption] = React.useState({keys: [], values: []})\n  const [totalEnergyConsumptionCountries, setTotalEnergyConsumptionCountries] = React.useState([])\n\n    const [totalElectricityConsumptionIndex, setTotalElectricityConsumptionIndex] = React.useState('World')\n    const [totalElectricityConsumption, setTotalElectricityConsumption] = React.useState({keys: [], values: []})\n    const [totalElectricityConsumptionCountries, setTotalElectricityConsumptionCountries] = React.useState([])\n\n    const [renewablesShareIndex, setRenewablesShareIndex] = React.useState('World')\n    const [renewablesShare, setRenewablesShare] = React.useState({keys: [], values: []})\n    const [renewablesShareCountries, setRenewablesShareCountries] = React.useState([])\n\n    const [energySupplySourceIndex, setEnergySupplySourceIndex] = React.useState('World')\n    const [energySupplySourceDatasets, setEnergySupplySourceDatasets] = React.useState([])\n    const [energySupplySourceCountries, setEnergySupplySourceCountries] = React.useState([])\n    const [energySupplySourceYear, setEnergySupplySourceYear] = React.useState(2018)\n    const [showRenewableCategories, setShowRenewableCategories] = React.useState(false)\n    const [energySupplySourceDoughnutMode, setEnergySupplySourceDoughnutMode] = React.useState(false)\n    const [energySupplySourceOnlyRenewables, setEnergySupplySourceOnlyRenewables] = React.useState(false)\n    const [energySupplySourceOnlyNonRenewables, setEnergySupplySourceOnlyNonRenewables] = React.useState(false)\n\n    const [renewableEnergyInvestmentIndex, setRenewableEnergyInvestmentIndex] = React.useState('World')\n    const [renewableEnergyInvestmentDatasets, setRenewableEnergyInvestmentDatasets] = React.useState([])\n    const [renewableEnergyInvestmentCountries, setRenewableEnergyInvestmentCountries] = React.useState([])\n\n    const [renewableEnergyInvestmentPercentageIndex, setRenewableEnergyInvestmentPercentageIndex] = React.useState('World')\n    const [renewableEnergyInvestmentPercentageDatasets, setRenewableEnergyInvestmentPercentageDatasets] = React.useState([])\n    const [renewableEnergyInvestmentPercentageCountries, setRenewableEnergyInvestmentPercentageCountries] = React.useState([])\n\n    const [renewableEnergyInvestmentByTechnologyIndex, setRenewableEnergyInvestmentByTechnologyIndex] = React.useState('World')\n    const [renewableEnergyInvestmentByTechnologyIndexDatasets, setRenewableEnergyInvestmentByTechnologyDatasets] = React.useState([])\n    const [renewableEnergyInvestmentByTechnologyIndexCountries, setRenewableEnergyInvestmentByTechnologyCountries] = React.useState([])\n\n    const [energyUsePerCapitaVsPovertyIndex, setEnergyUsePerCapitaVsPovertyIndex] = React.useState('World')\n    const [energyUsePerCapitaVsPovertyDatasets, setEnergyUsePerCapitaVsPovertyDatasets] = React.useState([])\n    const [energyUsePerCapitaVsPovertyCountries, setEnergyUsePerCapitaVsPovertyCountries] = React.useState([])\n    const [energyUsePerCapitaVsPovertyYear, setEnergyUsePerCapitaVsPovertyYear] = React.useState(2014)\n\n    const [totalFinalConsumptionBySectorYear, setTotalFinalConsumptionBySectorYear] = React.useState(2018)\n    const [totalFinalConsumptionBySectorDatasets, setTotalFinalConsumptionBySectorDatasets] = React.useState([])\n\n    const getEnergyConsumption = () => {\n        getEnerdataCsv(totalEnergyConsumptionData, setTotalEnergyConsumption, setTotalEnergyConsumptionCountries, totalEnergyConsumptionIndex)\n    }\n    const getCo2Emissions = () => {\n        getEnerdataCsv(totalco2EmissionsData, setTotalCo2Emmisions, setTotalCo2EmmisionsCountries, totalCo2EmmisionsIndex)\n    }\n    const getElectricityConsumption = () => {\n        getEnerdataCsv(totalElectricityConsumptionData, setTotalElectricityConsumption, setTotalElectricityConsumptionCountries, totalElectricityConsumptionIndex)\n    }\n    const getRenewablesShare = () => {\n        getEnerdataCsv(renewablesShareData, setRenewablesShare, setRenewablesShareCountries, renewablesShareIndex)\n    }\n\n    const getTotalFinalConsumptionBySector = () => {\n        getIaeDataCsv(totalFinalConsumptionBySectorData, setTotalFinalConsumptionBySectorDatasets)\n    }\n\n    const getEnergySupplySource = () => {\n        getOwidJson(\n            energySupplySource,\n            setEnergySupplySourceDatasets,\n            setEnergySupplySourceCountries,\n            energySupplySourceIndex,\n            showRenewableCategories,\n            energySupplySourceOnlyRenewables,\n            energySupplySourceOnlyNonRenewables\n        )\n    }\n\n    const getRenewableEnergyInvestment = () => {\n        getOwidJson2(\n            renewableEnergyInvestment,\n            setRenewableEnergyInvestmentDatasets,\n            setRenewableEnergyInvestmentCountries,\n            renewableEnergyInvestmentIndex\n        )\n    }\n\n    const getRenewableEnergyInvestmentByTechnology = () => {\n        getOwidCsv(\n            renewableEnergyInvestmentByTechnology,\n            setRenewableEnergyInvestmentByTechnologyDatasets,\n            setRenewableEnergyInvestmentByTechnologyCountries,\n            renewableEnergyInvestmentByTechnologyIndex\n        )\n    }\n\n    const getEnergyUsePerCapitaVsPoverty = () => {\n        getOwidBubbleCsv(\n            energyUsePerCapitaVsPoverty,\n            setEnergyUsePerCapitaVsPovertyDatasets,\n            setEnergySupplySourceCountries,\n            energyUsePerCapitaVsPovertyIndex,\n            energyUsePerCapitaVsPovertyYear\n        )\n    }\n\n    const getRenewableEnergyInvestmentPercentage = () => {\n        getOwidJson2(\n            renewableEnergyInvestmentPercentage,\n            setRenewableEnergyInvestmentPercentageDatasets,\n            setRenewableEnergyInvestmentPercentageCountries,\n            renewableEnergyInvestmentPercentageIndex\n        )\n    }\n\n  React.useEffect(() => {\n      getEnergyConsumption()\n      getCo2Emissions()\n      getElectricityConsumption()\n      getRenewablesShare()\n      getEnergySupplySource()\n      getRenewableEnergyInvestment()\n      getRenewableEnergyInvestmentPercentage()\n      getRenewableEnergyInvestmentByTechnology()\n      getEnergyUsePerCapitaVsPoverty()\n      getTotalFinalConsumptionBySector()\n      delayedCloseLoader();\n  }, [])\n\n  React.useEffect(() => {\n      getEnergyConsumption()\n  }, [totalEnergyConsumptionIndex]) // []\n\n  React.useEffect(() => {\n      getCo2Emissions()\n  }, [totalCo2EmmisionsIndex]) // []\n\n    React.useEffect(() => {\n        getElectricityConsumption()\n    }, [totalElectricityConsumptionIndex]) // []\n\n    React.useEffect(() => {\n        getRenewablesShare()\n    }, [renewablesShareIndex]) // []\n\n    React.useEffect(() => {\n        getEnergySupplySource()\n    }, [energySupplySourceIndex, showRenewableCategories, energySupplySourceOnlyRenewables, energySupplySourceOnlyNonRenewables]) // []\n\n    const delayedCloseLoader = () => {\n        setTimeout(() => {\n            setLoading(false)\n        }, 1300);\n    }\n\n    const dataComputed = () => {\n      let computed = true;\n      const mandatoryData = [totalElectricityConsumption, totalEnergyConsumption, totalCo2Emmisions, renewablesShare]\n      mandatoryData.forEach(data => {\n          if (data.values.length === 0) {\n              computed = false;\n          }\n      })\n        return computed;\n    }\n\n    console.log(totalFinalConsumptionBySectorDatasets)\n  return (\n      <>\n      {(!dataComputed() || loading) &&\n      <div className=\"box-loader\">\n          <div className={'d-flex flex-column'}>\n              <span className={\"mb-3\"}><strong>Heavy math computing...</strong></span>\n              <div className=\"loader-07\"></div>\n          </div>\n      </div>\n      }\n      {(dataComputed() && !loading) &&\n        <>\n            <div className=\"container my-3 my-md-5 pb-5\">\n                <div className=\"row justify-content-center header\">\n                    <div className=\"col-auto\">\n                        <span className={\"clickable\"} onClick={() => window.location.reload(false)}><strong>Book</strong></span>\n                    </div>\n                    <div className={\"col-auto\"}>\n                        <span className={\"disabled\"}>Playground (WIP)</span>\n                    </div>\n                </div>\n            </div>\n            <div className=\"py-2\"></div>\n          <div className=\"container my-3 my-md-5 pt-5\">\n              <div className=\"row\">\n                  <div className=\"col\">\n                      <h1 className={\"mb-3 pb-5 app-title color-primary\"}>Energy Book</h1>\n                      <h4>This book will teach you the basis about energy.</h4>\n                      <p>We are consuming a lot of it, and it is increasing every day.</p>\n                  </div>\n              </div>\n          </div>\n            <div className=\"pt-5\"></div>\n          <div className=\"container mt-5 pt-5\">\n              <div className=\"row\">\n                  <div className=\"col d-flex justify-content-center\">\n              <span className={\"mr-3\"}>\n                Let's take a look of how much <strong>energy</strong> the\n              </span>\n                      {autoComplete(totalEnergyConsumptionCountries, setTotalEnergyConsumptionIndex, totalEnergyConsumptionIndex)}\n                      <span className={\"mx-3\"}>\n              is consuming\n            </span>\n                  </div>\n              </div>\n          </div>\n          <div className=\"container my-3 my-md-5 pb-5\">\n              <div className=\"row\">\n                  <div className=\"col\">\n                      <div className=\"white-wrapper\">\n                          <Line\n                              name='Total energy consumption'\n                              keys={totalEnergyConsumption.keys}\n                              values={totalEnergyConsumption.values}\n                              options={{\n                                  plugins: {\n                                      labels: false,\n                                      datalabels: false\n                                  },\n                                  scales: {\n                                      yAxes: [{\n                                          ticks: {\n                                              beginAtZero: true,\n                                              suggestedMax: 4000\n                                          }\n                                      }]\n                                  },\n                                  legend: {\n                                      display: false\n                                  }\n                              }}\n                          >\n                          </Line>\n                      </div>\n                  </div>\n              </div>\n          </div>\n          <div className=\"container my-3 my-md-5\">\n              <div className=\"row\">\n                  <div className=\"col\">\n                      <p>Thanks to energy we can produce the amazing thing that is <strong>electricity</strong> &#9889;.</p>\n                      <p>The power of the vast majority of tools used in our world.</p>\n                  </div>\n              </div>\n          </div>\n          <div className=\"container mt-5\">\n              <div className=\"row\">\n                  <div className=\"col d-flex justify-content-center\">\n              <span className={\"mr-3\"}>\n                Here is the total electricity consumption of the\n              </span>\n                      {autoComplete(totalElectricityConsumptionCountries, setTotalElectricityConsumptionIndex, totalElectricityConsumptionIndex)}\n                  </div>\n              </div>\n          </div>\n          <div className=\"container my-3 my-md-5 pb-5\">\n              <div className=\"row\">\n                  <div className=\"col\">\n                      <div className=\"white-wrapper\">\n\n                      <Line\n                      name='Total electricity consumption'\n                      keys={totalElectricityConsumption.keys}\n                      values={totalElectricityConsumption.values}\n                      options={{\n                          plugins: {\n                              labels: false,\n                              datalabels: false\n                          },\n                          scales: {\n                              yAxes: [{\n                                  ticks: {\n                                      beginAtZero: true,\n                                      suggestedMax: 4000\n                                  }\n                              }]\n                          },\n                          legend: {\n                              display: false\n                          }\n                      }}\n                      color='255, 255, 3'>\n                  </Line>\n                      </div>\n                  </div>\n              </div>\n          </div>\n          <div className=\"container my-3 my-md-5\">\n              <div className=\"row\">\n                  <div className=\"col\">\n                      <p>So yes, <strong>energy</strong> is cool</p>\n                      <p>But there is a big issue currently highly coupled with energy consumption, <strong>co2 emissions</strong>. 🏭</p>\n                  </div>\n              </div>\n          </div>\n          <div className=\"container mt-5\">\n              <div className=\"row\">\n                  <div className=\"col d-flex justify-content-center\">\n              <span className={\"mr-3\"}>\n                Here is the co2 emissions of the\n              </span>\n                      {autoComplete(totalCo2EmmisionsCountries, setTotalCo2EmmisionsIndex, totalCo2EmmisionsIndex)}\n                  </div>\n              </div>\n          </div>\n          <div className=\"container my-3 my-md-5 pb-5\">\n              <div className=\"row\">\n                  <div className=\"col\">\n                      <div className=\"white-wrapper\">\n\n                      <Line\n                          name='Total co2 emissions'\n                          keys={totalCo2Emmisions.keys}\n                          values={totalCo2Emmisions.values}\n                          options={{\n                              plugins: {\n                                  labels: false,\n                                  datalabels: false\n                              },\n                              scales: {\n                                  yAxes: [{\n                                      ticks: {\n                                          beginAtZero: true,\n                                          suggestedMax: 10000\n                                      }\n                                  }]\n                              },\n                              legend: {\n                                  display: false\n                              }\n                          }}\n                          color={'255,0,0'}\n                      >\n                      </Line>\n                      </div>\n                  </div>\n              </div>\n          </div>\n          <div className=\"container my-3 my-md-5\">\n              <div className=\"row\">\n                  <div className=\"col\">\n                      <p>How can we <i>partly</i> solve it ?</p>\n                      <p>By using <strong>renewable energy</strong>.</p>\n                  </div>\n              </div>\n          </div>\n          <div className=\"container mt-5\">\n              <div className=\"row\">\n                  <div className=\"col d-flex justify-content-center\">\n              <span className={\"mr-3\"}>\n                Here is the renewables share of the\n              </span>\n                      {autoComplete(renewablesShareCountries, setRenewablesShareIndex, renewablesShareIndex)}\n                  </div>\n              </div>\n          </div>\n            <div className=\"container my-3 my-md-5 pb-5\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div className=\"white-wrapper\">\n\n                        <Line\n                name='Renewables share'\n                keys={renewablesShare.keys}\n                values={renewablesShare.values}\n                options={{\n                    plugins: {\n                        labels: false,\n                        datalabels: false\n                    },\n                    scales: {\n                        yAxes: [{\n                            ticks: {\n                                beginAtZero: true,\n                                suggestedMax: 100\n                            }\n                        }]\n                    },\n                    legend: {\n                        display: false\n                    }\n                }}\n                color={'0,255,0'}\n            >\n                        </Line></div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"container my-3 my-md-5\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <p>That is definetely not a lot, lets see what is in there...</p>\n                    </div>\n                </div>\n            </div>\n            <div className=\"container mt-5\">\n                <div className=\"row\">\n                    <div className=\"col d-flex justify-content-center\">\n              <span className={\"mr-3\"}>\n                Here is the energy consumption by source of the\n              </span>\n                        {autoComplete(energySupplySourceCountries, setEnergySupplySourceIndex, energySupplySourceIndex)}\n                    </div>\n                </div>\n            </div>\n          <div className=\"container my-3 my-md-5 pb-5\">\n              <div className=\"row\">\n                  <div className=\"col min-chart-height\">\n                      <div className=\"white-wrapper\">\n\n                      <FormGroup row>\n                          <FormControlLabel\n                              control={\n                                  <Switch\n                                      checked={showRenewableCategories}\n                                      onChange={() => {\n                                          setShowRenewableCategories(!(showRenewableCategories))\n                                          setEnergySupplySourceOnlyNonRenewables(false)\n                                          setEnergySupplySourceOnlyRenewables(false)\n                                      }}\n                                      name=\"showRenewableCategories\"\n                                      color=\"primary\"\n                                  />\n                              }\n                              label=\"Only renewable / non renewables\"\n                          />\n                          <FormControlLabel\n                              control={\n                                  <Switch\n                                      checked={energySupplySourceOnlyRenewables}\n                                      onChange={() => {\n                                          setEnergySupplySourceOnlyRenewables(!(energySupplySourceOnlyRenewables))\n                                          setEnergySupplySourceOnlyNonRenewables(false)\n                                          setShowRenewableCategories(false)\n                                      }}\n                                      name=\"showOnlyRenewableCategories\"\n                                      color=\"primary\"\n                                  />\n                              }\n                              label=\"Only renewables\"\n                          />\n                          <FormControlLabel\n                              control={\n                                  <Switch\n                                      checked={energySupplySourceOnlyNonRenewables}\n                                      onChange={() => {\n                                          setEnergySupplySourceOnlyNonRenewables(!(energySupplySourceOnlyNonRenewables))\n                                          setEnergySupplySourceOnlyRenewables(false)\n                                          setShowRenewableCategories(false)\n                                      }}\n                                      name=\"showOnlyNonRenewableCategories\"\n                                      color=\"primary\"\n                                  />\n                              }\n                              label=\"Only non renewables\"\n                          />\n                          <FormControlLabel\n                              control={\n                                  <Switch\n                                      checked={energySupplySourceDoughnutMode}\n                                      onChange={() => setEnergySupplySourceDoughnutMode(!(energySupplySourceDoughnutMode))}\n                                      name=\"energySupplySourceDoughnutMode\"\n                                      color=\"primary\"\n                                  />\n                              }\n                              label=\"Doughnut mode\"\n                          />\n                          {energySupplySourceDoughnutMode &&\n                          <>\n                              {autoComplete(energySupplySourceDatasets[0].keys, setEnergySupplySourceYear, energySupplySourceYear)}\n                          </>\n                          }\n                      </FormGroup>\n                      {energySupplySourceDoughnutMode &&\n                          <Doughnut\n                              name='Renewables share'\n                              datasets={energySupplySourceDatasets.map(dataset => {\n                                  const index = getKeyByValue(dataset.keys, energySupplySourceYear)\n                                  return {\n                                      name: dataset.name,\n                                      key: dataset.keys[index],\n                                      value: dataset.values[index]\n                                  }\n                              })}\n                              options={{\n                                  plugins: {\n                                      labels: false,\n                                      datalabels: false\n                                  },\n                                  scales: {\n                                      yAxes: [{\n                                          stacked: true,\n                                          ticks: {\n                                          }\n                                      }]\n                                  },\n                                  legend: {\n                                  }\n                              }}\n                          >\n                          </Doughnut>\n                      }\n                      {!energySupplySourceDoughnutMode &&\n                      <MultipleLines\n                          name='Renewables share'\n                          datasets={energySupplySourceDatasets}\n                          options={{\n                              plugins: {\n                                  labels: false,\n                                  datalabels: false\n                              },\n                              scales: {\n                                  yAxes: [{\n                                      stacked: true,\n                                      ticks: {\n                                      }\n                                  }]\n                              },\n                              legend: {\n                                  position: 'right',\n                                  reverse: true\n                              }\n                          }}\n                      >\n                      </MultipleLines>\n                      }\n                      </div>\n                  </div>\n              </div>\n          </div>\n            <div className=\"container my-3 my-md-5\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <p>What are we currently doing ?</p>\n                        <p>Let's see the actual <strong>investment</strong>.</p>\n                    </div>\n                </div>\n            </div>\n            <div className=\"container mt-5\">\n                <div className=\"row\">\n                    <div className=\"col d-flex justify-content-center\">\n              <span className={\"mr-3\"}>\n                Here is the renewable energy investment of the continents\n              </span>\n                    </div>\n                </div>\n            </div>\n            <div className=\"container my-3 my-md-5 pb-5\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div className=\"white-wrapper\">\n                            <MultipleLines\n                                name='Renewables share'\n                                datasets={renewableEnergyInvestmentDatasets}\n                                options={{\n                                    plugins: {\n                                        labels: false,\n                                        datalabels: false\n                                    },\n                                    scales: {\n                                        yAxes: [{\n                                            stacked: true,\n                                            ticks: {\n                                            }\n                                        }]\n                                    },\n                                    legend: {\n                                        position: 'right',\n                                        reverse: true\n                                    }\n                                }}\n                            >\n                            </MultipleLines>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"container my-3 my-md-5\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <p>Of course, every continents do not have the same GDP per capita</p>\n                        <p>So with a more accurate representation of <strong>proportions</strong>...</p>\n                    </div>\n                </div>\n            </div>\n            <div className=\"container mt-5\">\n                <div className=\"row\">\n                    <div className=\"col d-flex justify-content-center\">\n              <span className={\"mr-3\"}>\n                Here is the renewable energy investment of the continents by percentage of GDP\n              </span>\n                    </div>\n                </div>\n            </div>\n            <div className=\"container my-3 my-md-5 pb-5\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div className=\"white-wrapper\">\n                            <Doughnut\n                                name='Renewables share'\n                                datasets={renewableEnergyInvestmentPercentageDatasets.map(dataset => {\n                                    return {\n                                        name: dataset.name,\n                                        key: dataset.keys[0],\n                                        value: dataset.values[0]\n                                    }\n                                })}\n                                options={{\n                                    plugins: {\n                                        labels: false,\n                                        datalabels: false\n                                    },\n                                    scales: {\n                                        yAxes: [{\n                                            stacked: true,\n                                            ticks: {\n                                            }\n                                        }]\n                                    },\n                                    legend: {\n                                        position: 'right',\n                                        reverse: true\n                                    }\n                                }}\n                            >\n                            </Doughnut>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"container my-3 my-md-5\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <p>Also, the world has changed his mind on which technology to invest deeper overtime.</p>\n                    </div>\n                </div>\n            </div>\n            <div className=\"container mt-5\">\n                <div className=\"row\">\n                    <div className=\"col d-flex justify-content-center\">\n              <span className={\"mr-3\"}>\n                Here is the renewable energy investment of the world by <strong>technology</strong>\n              </span>\n                    </div>\n                </div>\n            </div>\n            <div className=\"container my-3 my-md-5 pb-5\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div className=\"white-wrapper\">\n                            <MultipleBars\n                                datasets={renewableEnergyInvestmentByTechnologyIndexDatasets}\n                                options={{\n                                    plugins: {\n                                        labels: false,\n                                        datalabels: false\n                                    },\n                                    legend: {\n                                    },\n                                    scales: {\n                                        xAxes: [{\n                                            stacked: true\n                                        }],\n                                        yAxes: [{\n                                            stacked: true\n                                        }]\n                                    }\n                                }}\n                            >\n                            </MultipleBars>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"container my-3 my-md-5\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <p>That being said, we can question ourselves, the one who invested the most in renewables compared to their GDP, are they also the one who consumes the most ?</p>\n                    </div>\n                </div>\n            </div>\n            <div className=\"container mt-5\">\n                <div className=\"row\">\n                    <div className=\"col d-flex justify-content-center\">\n              <span className={\"mr-3\"}>\n                Here is the energy use per capita compared to the share of population in extreme <strong>poverty</strong>\n              </span>\n                    </div>\n                </div>\n            </div>\n            <div className=\"container my-3 my-md-5 pb-5\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div className=\"white-wrapper\">\n                            <Bubble\n                                datasets={energyUsePerCapitaVsPovertyDatasets}\n                                options={{\n                                    plugins: {\n                                        datalabels: {\n                                            anchor: function (context) {\n                                                var value = context.dataset.data[context.dataIndex];\n                                                return (value.x > 3000 || (value.x < 3000 && value.y > 6)) ? 'end' : 'center';\n                                            },\n                                            align: function (context) {\n                                                var value = context.dataset.data[context.dataIndex];\n                                                return (value.x > 3000 || (value.x < 3000 && value.y > 6)) ? 'end' : 'center';\n                                            },\n                                            color: function (context) {\n                                                var value = context.dataset.data[context.dataIndex];\n                                                return (value.x > 3000 || (value.x < 3000 && value.y > 6)) ? context.dataset.backgroundColor : '';\n                                            },\n                                            font: {\n                                                weight: 'bold'\n                                            },\n                                            formatter: function (value, context) {\n                                                return context.dataset.label;\n                                            },\n                                            offset: 2,\n                                            padding: 0\n                                        }\n                                    },\n                                }}\n                            >\n                            </Bubble>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"container my-3 my-md-5\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <p>Digging deeper, which <strong>sector</strong> consumes the most ?</p>\n                    </div>\n                </div>\n            </div>\n            <div className=\"container mt-5\">\n                <div className=\"row\">\n                    <div className=\"col d-flex justify-content-center\">\n              <span className={\"mr-3\"}>\n                Here is the total final energy consumption of the World by sector\n              </span>\n                    </div>\n                </div>\n            </div>\n            <div className=\"container my-3 my-md-5 pb-5\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div className=\"white-wrapper\">\n                            <MultipleLines\n                                name='total final consumption by sector'\n                                datasets={totalFinalConsumptionBySectorDatasets}\n                                options={{\n                                    plugins: {\n                                        labels: false,\n                                        datalabels: false\n                                    },\n                                    scales: {\n                                        yAxes: [{\n                                            stacked: true,\n                                            ticks: {\n                                            }\n                                        }]\n                                    },\n                                    legend: {\n                                        position: 'right',\n                                        reverse: true\n                                    }\n                                }}\n                            >\n                            </MultipleLines>\n                        </div>\n                    </div>\n                </div>\n            </div>\n      </>\n      }\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/total_energy_consumption.910e7983.csv\";","module.exports = __webpack_public_path__ + \"static/media/total_co2_emissions.ae35b90c.csv\";","module.exports = __webpack_public_path__ + \"static/media/total_electricity_consumption.c23a0dbf.csv\";","module.exports = __webpack_public_path__ + \"static/media/renewables_share.9ef3a7c8.csv\";","module.exports = __webpack_public_path__ + \"static/media/investment-in-renewable-energy-by-technology.72070554.csv\";","module.exports = __webpack_public_path__ + \"static/media/energy-use-per-capita-vs-share-of-population-in-extreme-poverty.95d591bf.csv\";","module.exports = __webpack_public_path__ + \"static/media/total_final_consumption_by_sector.e9c0cfab.csv\";"],"sourceRoot":""}