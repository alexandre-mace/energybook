{"version":3,"sources":["UI/components/Line.js","UI/components/MultipleLines.js","UI/components/Doughnut.js","App.js","serviceWorker.js","index.js","Dataset/total_energy_consumption.csv","Dataset/total_co2_emissions.csv","Dataset/total_electricity_consumption.csv","Dataset/renewables_share.csv"],"names":["Line","name","keys","values","options","color","data","labels","datasets","label","lineTension","displayColors","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","MultipleLines","map","dataset","o","Math","round","r","random","getRandomColor","Doughnut","plugins","render","fontSize","fontStyle","fontColor","fontFamily","value","getEnerdataCsv","file","setter","countrySetter","index","a","fetch","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","results","Papa","parse","header","rows","row","zone","Object","filter","parseFloat","showRenewableCategory","entityKey","entity","variables","variable","i","entities","length","countryEntityKey","push","year","years","display","split","conversionFactor","includes","renewables","nonRenewables","renewableValues","forEach","key","nonRenewableValues","autoComplete","setIndex","Autocomplete","size","getOptionLabel","option","toString","defaultValue","fullWidth","onChange","event","renderInput","params","TextField","className","style","width","isNaN","placeholder","App","React","useState","loading","setLoading","totalCo2EmmisionsIndex","setTotalCo2EmmisionsIndex","totalCo2Emmisions","setTotalCo2Emmisions","totalCo2EmmisionsCountries","setTotalCo2EmmisionsCountries","totalEnergyConsumptionIndex","setTotalEnergyConsumptionIndex","totalEnergyConsumption","setTotalEnergyConsumption","totalEnergyConsumptionCountries","setTotalEnergyConsumptionCountries","totalElectricityConsumptionIndex","setTotalElectricityConsumptionIndex","totalElectricityConsumption","setTotalElectricityConsumption","totalElectricityConsumptionCountries","setTotalElectricityConsumptionCountries","renewablesShareIndex","setRenewablesShareIndex","renewablesShare","setRenewablesShare","renewablesShareCountries","setRenewablesShareCountries","energySupplySourceIndex","setEnergySupplySourceIndex","energySupplySourceDatasets","setEnergySupplySourceDatasets","energySupplySourceCountries","setEnergySupplySourceCountries","energySupplySourceYear","setEnergySupplySourceYear","showRenewableCategories","setShowRenewableCategories","energySupplySourceDoughnutMode","setEnergySupplySourceDoughnutMode","getEnergyConsumption","totalEnergyConsumptionData","getCo2Emissions","totalco2EmissionsData","getElectricityConsumption","totalElectricityConsumptionData","getRenewablesShare","renewablesShareData","getEnergySupplySource","getOwidJson","energySupplySource","useEffect","delayedCloseLoader","setTimeout","dataComputed","computed","scales","yAxes","ticks","beginAtZero","suggestedMax","legend","FormGroup","FormControlLabel","control","Switch","checked","array","findIndex","arrayValue","stacked","position","reverse","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.b6ebd06e.chunk.js","sourcesContent":["import React from 'react';\nimport {Line as ChartLine} from 'react-chartjs-2';\n\nconst Line = ({name, keys, values, options = {}, color = '75,192,192'}) => (\n    <ChartLine\n        options={options}\n        data={{\n            labels: keys,\n            datasets: [\n                {\n                    label: name,\n                    // fill: false,\n                    lineTension: 0.1,\n                    displayColors: false,\n                    backgroundColor: `rgba(${color},0.6)`,\n                    borderColor: `rgba(${color},1)`,\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: `rgba(${color},1)`,\n                    pointBackgroundColor: '#fff',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: `rgba(${color},1)`,\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    data: values\n                }\n            ]\n        }} />\n)\nexport default Line;","import React from 'react';\nimport {Line as ChartLine} from 'react-chartjs-2';\n\nfunction getRandomColor() {\n    var o = Math.round, r = Math.random, s = 255;\n    return o(r()*s) + ',' + o(r()*s) + ',' + o(r()*s);\n}\n\n\nconst MultipleLines = ({datasets, options = {}}) => (\n    <ChartLine\n        options={options}\n        data={{\n            labels: datasets[0].keys,\n            datasets: datasets.map(dataset => {\n                const color = getRandomColor()\n                return {\n                label: dataset.name,\n                // fill: false,\n                lineTension: 0.1,\n                displayColors: false,\n                backgroundColor: `rgba(${color},0.6)`,\n                borderColor: `rgba(${color},1)`,\n                borderCapStyle: 'butt',\n                borderDash: [],\n                borderDashOffset: 0.0,\n                borderJoinStyle: 'miter',\n                pointBorderColor: `rgba(${color},1)`,\n                pointBackgroundColor: `rgba(${color},1)`,\n                pointBorderWidth: 1,\n                pointHoverRadius: 5,\n                pointHoverBackgroundColor: `rgba(${color},1)`,\n                pointHoverBorderColor: `rgba(${color},1)`,\n                pointHoverBorderWidth: 2,\n                pointRadius: 1,\n                pointHitRadius: 1000,\n                data: dataset.values\n            }})\n        }} />\n)\nexport default MultipleLines;","import React from 'react';\nimport {Doughnut as ChartDoughnut} from 'react-chartjs-2';\nimport 'chartjs-plugin-labels';\n\nfunction getRandomColor() {\n    var o = Math.round, r = Math.random, s = 255;\n    return o(r()*s) + ',' + o(r()*s) + ',' + o(r()*s);\n}\n\n\nconst Doughnut = ({datasets, options = {}}) => (\n    <ChartDoughnut\n        options={{\n            plugins: {\n                labels: {\n                    render: 'label',\n                    fontSize: 14,\n                    fontStyle: 'bold',\n                    fontColor: '#000',\n                    fontFamily: '\"Lucida Console\", Monaco, monospace'\n                }\n            }\n        }}\n        data={{\n            labels: datasets.map(dataset => dataset.name),\n            datasets: [{\n                data: datasets.map(dataset => dataset.value),\n                backgroundColor: datasets.map(() => `rgba(${getRandomColor()},0.6)`)\n            }]\n        }} />\n)\nexport default Doughnut;","import React from 'react';\nimport './App.css';\nimport Papa from 'papaparse'\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\n\nimport totalEnergyConsumptionData from './Dataset/total_energy_consumption.csv';\nimport totalco2EmissionsData from './Dataset/total_co2_emissions.csv';\nimport totalElectricityConsumptionData from './Dataset/total_electricity_consumption.csv';\nimport renewablesShareData from './Dataset/renewables_share.csv';\nimport energySupplySource from './Dataset/energy_supply_source.json';\nimport Line from \"./UI/components/Line\";\nimport MultipleLines from \"./UI/components/MultipleLines\";\nimport Doughnut from \"./UI/components/Doughnut\";\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\n\nfunction getKeyByValue(array, value) {\n    return array.findIndex(arrayValue => arrayValue === value);\n}\n\nasync function getEnerdataCsv(file, setter, countrySetter, index) {\n  const response = await fetch(file)\n  const reader = response.body.getReader()\n  const result = await reader.read() // raw array\n  const decoder = new TextDecoder('utf-8')\n  const csv = decoder.decode(result.value) // the csv text\n  const results = Papa.parse(csv, { header: true }) // object with { data, errors, meta }\n  const rows = results.data // array of objects\n\n  countrySetter(rows.map(row => row.zone));\n  setter({\n    keys: Object\n        .keys(rows.filter(data => data.zone === index)[0])\n        .filter(data => data !== 'zone')\n    ,\n    values: Object\n        .values(rows.filter(data => data.zone === index)[0])\n        .filter(value => value !== 'World')\n        .map(value => parseFloat(value))\n  })\n}\nasync function getIeaCsv(file, setter, countrySetter, index) {\n    const response = await fetch(file)\n    const reader = response.body.getReader()\n    const result = await reader.read() // raw array\n    const decoder = new TextDecoder('utf-8')\n    const csv = decoder.decode(result.value) // the csv text\n    const results = Papa.parse(csv, { header: true }) // object with { data, errors, meta }\n    const rows = results.data // array of objects\n\n    countrySetter(Array.from(new Set(rows.map(row => row.Country))).filter(country => country !== ''));\n    setter(rows.filter(row => row.Country === index).filter(row => row.Product !== 'Total').map(row => ({\n        keys: Object.keys(row)\n            .filter(number => (!isNaN(parseFloat(number)) && isFinite(number)))\n            .map(value => parseFloat(value))\n        ,\n        values: Object.values(row)\n            .filter(number => (!isNaN(parseFloat(number)) && isFinite(number)))\n            .map(value => parseFloat(value))\n        ,\n        name: row.Product\n    })))\n}\n\nasync function getOwidJson(file, setter, countrySetter, index, showRenewableCategory) {\n    countrySetter(Object.values(file.entityKey).map(entity => entity.name))\n    const data = Object.values(file.variables).map((variable) => {\n        let datasets = [];\n        for (let i = 0; i < variable.entities.length; i++) {\n            let countryEntityKey = variable.entities[i]\n            datasets.push({\n                year: variable.years[i],\n                value: variable.values[i],\n                zone: file.entityKey[countryEntityKey].name\n            })\n        }\n\n        datasets = datasets.filter(dataset => (dataset.zone === index && dataset.year > 1970))\n\n        if (!showRenewableCategory) {\n            return {\n                name: variable.display.name ?? variable.name.split(' ')[0],\n                keys: datasets.map(dataset => dataset.year),\n                values: datasets.map(dataset => dataset.value)\n                    .map(value => value * (\n                        variable.display.conversionFactor\n                            ? variable.display.conversionFactor\n                            : variable.display.name ? 1 : 277.78)\n                    )\n            }\n        }\n\n        const renewables = ['Other renewables', 'Hydropower', 'Solar', 'Wind', 'Biofuels'];\n        return {\n            name: renewables.includes(variable.display.name ?? variable.name.split(' ')[0]) ? 'Renewable' : 'Non renewable',\n            keys: datasets.map(dataset => dataset.year),\n            values: datasets.map(dataset => dataset.value)\n                .map(value => value * (\n                    variable.display.conversionFactor\n                        ? variable.display.conversionFactor\n                        : variable.display.name ? 1 : 277.78)\n                )\n        }\n    })\n\n\n    if (!showRenewableCategory) {\n        setter(data)\n        return;\n    }\n\n    const renewables = data.filter(dataset => dataset.name === 'Renewable');\n    const nonRenewables = data.filter(dataset => dataset.name === 'Non renewable');\n    let keys = data[0].keys;\n\n    let renewableValues = [];\n    data[0].keys.forEach((value, key) => {\n        renewables.forEach(dataset => {\n            if (!renewableValues[key]) {\n                renewableValues.push(dataset.values[key])\n            } else {\n                renewableValues[key] = renewableValues[key] + dataset.values[key]\n            }\n        })\n    });\n\n    let nonRenewableValues = [];\n    data[0].keys.forEach((value, key) => {\n        nonRenewables.forEach(dataset => {\n            if (!nonRenewableValues[key]) {\n                nonRenewableValues.push(dataset.values[key])\n            } else {\n                nonRenewableValues[key] = nonRenewableValues[key] + dataset.values[key]\n            }\n        })\n    });\n\n    setter([\n        {\n            name: 'Renewable',\n            keys: keys,\n            values: renewableValues\n        },\n        {\n            name: 'Non renewable',\n            keys: keys,\n            values: nonRenewableValues\n        }\n    ])\n}\n\nconst autoComplete = (options, setIndex, index) => {\n    return (\n        <Autocomplete\n            size=\"small\"\n            options={options}\n            getOptionLabel={(option) => option.toString()}\n            defaultValue={index}\n            fullWidth={false}\n            onChange={\n                (event, value) => setIndex(value === null ? options[options.length - 1] : value)\n            }\n            renderInput={(params) => (\n                <TextField\n                    {...params}\n                    fullWidth={false}\n                    className={\"widthTranslate\"}\n                    style={{width: (100 + (!isNaN(index.length) ? (index.length ** 1.7) : 10))}}\n                    label={options[index]}\n                    placeholder={options[index]}\n                />\n            )}\n        />\n    )\n}\n\nfunction App() {\n    const [loading, setLoading] = React.useState(true)\n\n    const [totalCo2EmmisionsIndex, setTotalCo2EmmisionsIndex] = React.useState('World')\n  const [totalCo2Emmisions, setTotalCo2Emmisions] = React.useState({keys: [], values: []})\n  const [totalCo2EmmisionsCountries, setTotalCo2EmmisionsCountries] = React.useState([])\n\n  const [totalEnergyConsumptionIndex, setTotalEnergyConsumptionIndex] = React.useState('World')\n  const [totalEnergyConsumption, setTotalEnergyConsumption] = React.useState({keys: [], values: []})\n  const [totalEnergyConsumptionCountries, setTotalEnergyConsumptionCountries] = React.useState([])\n\n    const [totalElectricityConsumptionIndex, setTotalElectricityConsumptionIndex] = React.useState('World')\n    const [totalElectricityConsumption, setTotalElectricityConsumption] = React.useState({keys: [], values: []})\n    const [totalElectricityConsumptionCountries, setTotalElectricityConsumptionCountries] = React.useState([])\n\n    const [renewablesShareIndex, setRenewablesShareIndex] = React.useState('World')\n    const [renewablesShare, setRenewablesShare] = React.useState({keys: [], values: []})\n    const [renewablesShareCountries, setRenewablesShareCountries] = React.useState([])\n\n    const [energySupplySourceIndex, setEnergySupplySourceIndex] = React.useState('World')\n    const [energySupplySourceDatasets, setEnergySupplySourceDatasets] = React.useState([])\n    const [energySupplySourceCountries, setEnergySupplySourceCountries] = React.useState([])\n    const [energySupplySourceYear, setEnergySupplySourceYear] = React.useState(2018)\n    const [showRenewableCategories, setShowRenewableCategories] = React.useState(false)\n    const [energySupplySourceDoughnutMode, setEnergySupplySourceDoughnutMode] = React.useState(false)\n\n    const getEnergyConsumption = () => {\n        getEnerdataCsv(totalEnergyConsumptionData, setTotalEnergyConsumption, setTotalEnergyConsumptionCountries, totalEnergyConsumptionIndex)\n    }\n    const getCo2Emissions = () => {\n        getEnerdataCsv(totalco2EmissionsData, setTotalCo2Emmisions, setTotalCo2EmmisionsCountries, totalCo2EmmisionsIndex)\n    }\n    const getElectricityConsumption = () => {\n        getEnerdataCsv(totalElectricityConsumptionData, setTotalElectricityConsumption, setTotalElectricityConsumptionCountries, totalElectricityConsumptionIndex)\n    }\n    const getRenewablesShare = () => {\n        getEnerdataCsv(renewablesShareData, setRenewablesShare, setRenewablesShareCountries, renewablesShareIndex)\n    }\n    const getEnergySupplySource = () => {\n        getOwidJson(energySupplySource, setEnergySupplySourceDatasets, setEnergySupplySourceCountries, energySupplySourceIndex, showRenewableCategories)\n    }\n  React.useEffect(() => {\n      getEnergyConsumption()\n      getCo2Emissions()\n      getElectricityConsumption()\n      getRenewablesShare()\n      getEnergySupplySource()\n      delayedCloseLoader();\n  }, [])\n\n  React.useEffect(() => {\n      getEnergyConsumption()\n  }, [totalEnergyConsumptionIndex]) // []\n\n  React.useEffect(() => {\n      getCo2Emissions()\n  }, [totalCo2EmmisionsIndex]) // []\n\n    React.useEffect(() => {\n        getElectricityConsumption()\n    }, [totalElectricityConsumptionIndex]) // []\n\n    React.useEffect(() => {\n        getRenewablesShare()\n    }, [renewablesShareIndex]) // []\n\n    React.useEffect(() => {\n        getEnergySupplySource()\n    }, [energySupplySourceIndex, showRenewableCategories]) // []\n\n    const delayedCloseLoader = () => {\n        setTimeout(() => {\n            setLoading(false)\n        }, 1300);\n    }\n\n    const dataComputed = () => {\n      let computed = true;\n      const mandatoryData = [totalElectricityConsumption, totalEnergyConsumption, totalCo2Emmisions, renewablesShare]\n      mandatoryData.forEach(data => {\n          if (data.values.length === 0) {\n              computed = false;\n          }\n      })\n        return computed;\n    }\n\n  return (\n      <>\n      {(!dataComputed() || loading) &&\n      <div className=\"box-loader\">\n          <div className={'d-flex flex-column'}>\n              <span className={\"mb-3\"}><strong>Heavy math computing...</strong></span>\n              <div className=\"loader-07\"></div>\n          </div>\n      </div>\n      }\n      {(dataComputed() && !loading) &&\n        <>\n            <div className=\"container my-3 my-md-5 pb-5\">\n                <div className=\"row justify-content-center header\">\n                    <div className=\"col-auto\">\n                        <span><strong>Book</strong></span>\n                    </div>\n                    <div className={\"col-auto\"}>\n                        <span>Playground (WIP)</span>\n                    </div>\n                </div>\n            </div>\n          <div className=\"container my-3 my-md-5\">\n              <div className=\"row\">\n                  <div className=\"col\">\n                      <h1 className={\"mb-5 text-center pb-5\"}>Welcome to the <strong>Energy Book</strong> &#128522;</h1>\n                      <h4>This book will teach you the basis about energy.</h4>\n                      <p>We are consuming a lot of it, and it is growing fast..</p>\n                  </div>\n              </div>\n          </div>\n          <div className=\"container mt-5\">\n              <div className=\"row\">\n                  <div className=\"col d-flex justify-content-center\">\n              <span className={\"mr-3\"}>\n                Let's take a look of how much <strong>energy</strong> the\n              </span>\n                      {autoComplete(totalEnergyConsumptionCountries, setTotalEnergyConsumptionIndex, totalEnergyConsumptionIndex)}\n                      <span className={\"mx-3\"}>\n              is consuming\n            </span>\n                  </div>\n              </div>\n          </div>\n          <div className=\"container my-3 my-md-5 pb-5\">\n              <div className=\"row\">\n                  <div className=\"col\">\n                      <div className=\"white-wrapper\">\n                          <Line\n                              name='Total energy consumption'\n                              keys={totalEnergyConsumption.keys}\n                              values={totalEnergyConsumption.values}\n                              options={{\n                                  scales: {\n                                      yAxes: [{\n                                          ticks: {\n                                              beginAtZero: true,\n                                              suggestedMax: 4000\n                                          }\n                                      }]\n                                  },\n                                  legend: {\n                                      display: false\n                                  }\n                              }}\n                          >\n                          </Line>\n                      </div>\n                  </div>\n              </div>\n          </div>\n          <div className=\"container my-3 my-md-5\">\n              <div className=\"row\">\n                  <div className=\"col\">\n                      <p>Thanks to energy we can produce the amazing thing that is <strong>electricity</strong> &#9889;.</p>\n                      <p>The power of the vast majority of tools used in our world.</p>\n                  </div>\n              </div>\n          </div>\n          <div className=\"container mt-5\">\n              <div className=\"row\">\n                  <div className=\"col d-flex justify-content-center\">\n              <span className={\"mr-3\"}>\n                Here is the total electricity consumption of the\n              </span>\n                      {autoComplete(totalElectricityConsumptionCountries, setTotalElectricityConsumptionIndex, totalElectricityConsumptionIndex)}\n                  </div>\n              </div>\n          </div>\n          <div className=\"container my-3 my-md-5 pb-5\">\n              <div className=\"row\">\n                  <div className=\"col\">\n                      <div className=\"white-wrapper\">\n\n                      <Line\n                      name='Total electricity consumption'\n                      keys={totalElectricityConsumption.keys}\n                      values={totalElectricityConsumption.values}\n                      options={{\n                          scales: {\n                              yAxes: [{\n                                  ticks: {\n                                      beginAtZero: true,\n                                      suggestedMax: 4000\n                                  }\n                              }]\n                          },\n                          legend: {\n                              display: false\n                          }\n                      }}\n                      color='255, 255, 3'>\n                  </Line>\n                      </div>\n                  </div>\n              </div>\n          </div>\n          <div className=\"container my-3 my-md-5\">\n              <div className=\"row\">\n                  <div className=\"col\">\n                      <p>So yes, <strong>energy</strong> is cool</p>\n                      <p>But there is a big issue currently highly coupled with energy consumption, co2 emissions. 🏭</p>\n                  </div>\n              </div>\n          </div>\n          <div className=\"container mt-5\">\n              <div className=\"row\">\n                  <div className=\"col d-flex justify-content-center\">\n              <span className={\"mr-3\"}>\n                Here is the co2 emissions of the\n              </span>\n                      {autoComplete(totalCo2EmmisionsCountries, setTotalCo2EmmisionsIndex, totalCo2EmmisionsIndex)}\n                  </div>\n              </div>\n          </div>\n          <div className=\"container my-3 my-md-5 pb-5\">\n              <div className=\"row\">\n                  <div className=\"col\">\n                      <div className=\"white-wrapper\">\n\n                      <Line\n                          name='Total co2 emissions'\n                          keys={totalCo2Emmisions.keys}\n                          values={totalCo2Emmisions.values}\n                          options={{\n                              scales: {\n                                  yAxes: [{\n                                      ticks: {\n                                          beginAtZero: true,\n                                          suggestedMax: 10000\n                                      }\n                                  }]\n                              },\n                              legend: {\n                                  display: false\n                              }\n                          }}\n                          color={'255,0,0'}\n                      >\n                      </Line>\n                      </div>\n                  </div>\n              </div>\n          </div>\n          <div className=\"container my-3 my-md-5\">\n              <div className=\"row\">\n                  <div className=\"col\">\n                      <p>How can we <i>partly</i> solve it ?</p>\n                      <p>By using renewable energy.</p>\n                  </div>\n              </div>\n          </div>\n          <div className=\"container mt-5\">\n              <div className=\"row\">\n                  <div className=\"col d-flex justify-content-center\">\n              <span className={\"mr-3\"}>\n                Here is the renewables share of the\n              </span>\n                      {autoComplete(renewablesShareCountries, setRenewablesShareIndex, renewablesShareIndex)}\n                  </div>\n              </div>\n          </div>\n            <div className=\"container my-3 my-md-5 pb-5\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div className=\"white-wrapper\">\n\n                        <Line\n                name='Renewables share'\n                keys={renewablesShare.keys}\n                values={renewablesShare.values}\n                options={{\n                    scales: {\n                        yAxes: [{\n                            ticks: {\n                                beginAtZero: true,\n                                suggestedMax: 100\n                            }\n                        }]\n                    },\n                    legend: {\n                        display: false\n                    }\n                }}\n                color={'0,255,0'}\n            >\n                        </Line></div>\n                    </div></div></div>\n            <div className=\"container my-3 my-md-5\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <p>That is definetely not a lot, lets see what is in there...</p>\n                    </div>\n                </div>\n            </div>\n            <div className=\"container mt-5\">\n                <div className=\"row\">\n                    <div className=\"col d-flex justify-content-center\">\n              <span className={\"mr-3\"}>\n                Here is the energy consumption by source of the\n              </span>\n                        {autoComplete(energySupplySourceCountries, setEnergySupplySourceIndex, energySupplySourceIndex)}\n                    </div>\n                </div>\n            </div>\n          <div className=\"container my-3 my-md-5 pb-5\">\n              <div className=\"row\">\n                  <div className=\"col\">\n\n                  </div>\n              </div>\n              <div className=\"row\">\n                  <div className=\"col min-chart-height\">\n                      <div className=\"white-wrapper\">\n\n                      <FormGroup row>\n                          <FormControlLabel\n                              control={\n                                  <Switch\n                                      checked={showRenewableCategories}\n                                      onChange={() => setShowRenewableCategories(!(showRenewableCategories))}\n                                      name=\"showRenewableCategories\"\n                                      color=\"primary\"\n                                  />\n                              }\n                              label=\"Only renewable / non renewables\"\n                          />\n                          <FormControlLabel\n                              control={\n                                  <Switch\n                                      checked={energySupplySourceDoughnutMode}\n                                      onChange={() => setEnergySupplySourceDoughnutMode(!(energySupplySourceDoughnutMode))}\n                                      name=\"energySupplySourceDoughnutMode\"\n                                      color=\"primary\"\n                                  />\n                              }\n                              label=\"Doughnut mode\"\n                          />\n                          {energySupplySourceDoughnutMode &&\n                          <>\n                              {autoComplete(energySupplySourceDatasets[0].keys, setEnergySupplySourceYear, energySupplySourceYear)}\n                          </>\n                          }\n                      </FormGroup>\n                      {energySupplySourceDoughnutMode &&\n                          <Doughnut\n                              name='Renewables share'\n                              datasets={energySupplySourceDatasets.map(dataset => {\n                                  const index = getKeyByValue(dataset.keys, energySupplySourceYear)\n                                  return {\n                                      name: dataset.name,\n                                      key: dataset.keys[index],\n                                      value: dataset.values[index]\n                                  }\n                              })}\n                              options={{\n                                  scales: {\n                                      yAxes: [{\n                                          stacked: true,\n                                          ticks: {\n                                          }\n                                      }]\n                                  },\n                                  legend: {\n                                  }\n                              }}\n                          >\n                          </Doughnut>\n                      }\n                      {!energySupplySourceDoughnutMode &&\n                      <MultipleLines\n                          name='Renewables share'\n                          datasets={energySupplySourceDatasets}\n                          options={{\n                              scales: {\n                                  yAxes: [{\n                                      stacked: true,\n                                      ticks: {\n                                      }\n                                  }]\n                              },\n                              legend: {\n                                  position: 'right',\n                                  reverse: true\n                              }\n                          }}\n                      >\n                      </MultipleLines>\n                      }\n                      </div>\n                  </div>\n              </div>\n          </div>\n      </>\n      }\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/total_energy_consumption.910e7983.csv\";","module.exports = __webpack_public_path__ + \"static/media/total_co2_emissions.ae35b90c.csv\";","module.exports = __webpack_public_path__ + \"static/media/total_electricity_consumption.c23a0dbf.csv\";","module.exports = __webpack_public_path__ + \"static/media/renewables_share.9ef3a7c8.csv\";"],"sourceRoot":""}