{"version":3,"sources":["UI/components/Line.js","App.js","serviceWorker.js","index.js","Dataset/total_energy_consumption.csv","Dataset/total_co2_emissions.csv","Dataset/total_electricity_consumption.csv","Dataset/renewables_share.csv"],"names":["Line","name","keys","values","options","color","data","labels","datasets","label","lineTension","displayColors","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","getEnerdataCsv","file","setter","countrySetter","index","a","fetch","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","value","results","Papa","parse","header","rows","map","row","zone","Object","filter","parseFloat","autoComplete","setIndex","Autocomplete","size","getOptionLabel","option","defaultValue","fullWidth","onChange","event","renderInput","params","TextField","className","style","width","length","placeholder","App","React","useState","loading","setLoading","totalCo2EmmisionsIndex","setTotalCo2EmmisionsIndex","totalCo2Emmisions","setTotalCo2Emmisions","totalCo2EmmisionsCountries","setTotalCo2EmmisionsCountries","totalEnergyConsumptionIndex","setTotalEnergyConsumptionIndex","totalEnergyConsumption","setTotalEnergyConsumption","totalEnergyConsumptionCountries","setTotalEnergyConsumptionCountries","totalElectricityConsumptionIndex","setTotalElectricityConsumptionIndex","totalElectricityConsumption","setTotalElectricityConsumption","totalElectricityConsumptionCountries","setTotalElectricityConsumptionCountries","renewablesShareIndex","setRenewablesShareIndex","renewablesShare","setRenewablesShare","renewablesShareCountries","setRenewablesShareCountries","getEnergyConsumption","totalEnergyConsumptionData","getCo2Emissions","totalco2EmissionsData","getElectricityConsumption","totalElectricityConsumptionData","getRenewablesShare","renewablesShareData","useEffect","delayedCloseLoader","setTimeout","dataComputed","computed","forEach","scales","yAxes","ticks","beginAtZero","suggestedMax","legend","display","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"sTAkCeA,EA/BF,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OAAd,IAAsBC,eAAtB,MAAgC,GAAhC,MAAoCC,aAApC,MAA4C,aAA5C,SACT,kBAAC,OAAD,CACID,QAASA,EACTE,KAAM,CACFC,OAAQL,EACRM,SAAU,CACN,CACIC,MAAOR,EAEPS,YAAa,GACbC,eAAe,EACfC,gBAAgB,QAAD,OAAUP,EAAV,SACfQ,YAAY,QAAD,OAAUR,EAAV,OACXS,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAiB,QAAD,OAAUb,EAAV,OAChBc,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA0B,QAAD,OAAUjB,EAAV,OACzBkB,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChBpB,KAAMH,Q,SCjBXwB,E,oFAAf,WAA8BC,EAAMC,EAAQC,EAAeC,GAA3D,2BAAAC,EAAA,sEACyBC,MAAML,GAD/B,cACQM,EADR,OAEQC,EAASD,EAASE,KAAKC,YAF/B,SAGuBF,EAAOG,OAH9B,OAGQC,EAHR,OAIQC,EAAU,IAAIC,YAAY,SAC1BC,EAAMF,EAAQG,OAAOJ,EAAOK,OAC5BC,EAAUC,IAAKC,MAAML,EAAK,CAAEM,QAAQ,IACpCC,EAAOJ,EAAQvC,KAErBwB,EAAcmB,EAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIC,SAClCvB,EAAO,CACL3B,KAAMmD,OACDnD,KAAK+C,EAAKK,QAAO,SAAAhD,GAAI,OAAIA,EAAK8C,OAASrB,KAAO,IAC9CuB,QAAO,SAAAhD,GAAI,MAAa,SAATA,KAEpBH,OAAQkD,OACHlD,OAAO8C,EAAKK,QAAO,SAAAhD,GAAI,OAAIA,EAAK8C,OAASrB,KAAO,IAChDuB,QAAO,SAAAV,GAAK,MAAc,UAAVA,KAChBM,KAAI,SAAAN,GAAK,OAAIW,WAAWX,QAlBjC,6C,sBAqBA,IAAMY,EAAe,SAACpD,EAASqD,EAAU1B,GACrC,OACI,kBAAC2B,EAAA,EAAD,CACIC,KAAK,QACLvD,QAASA,EACTwD,eAAgB,SAACC,GAAD,OAAYA,GAC5BC,aAAc,QACdC,WAAW,EACXC,SACI,SAACC,EAAOrB,GAAR,OAAkBa,EAASb,IAE/BsB,YAAa,SAACC,GAAD,OACT,kBAACC,EAAA,EAAD,iBACQD,EADR,CAEIJ,WAAW,EACXM,UAAW,iBACXC,MAAO,CAACC,MAAQ,aAAMxC,EAAMyC,OAAU,MACtC/D,MAAOL,EAAQ2B,GACf0C,YAAarE,EAAQ2B,UA+Q1B2C,MAxQf,WAAgB,IAAD,EACmBC,IAAMC,UAAS,GADlC,mBACJC,EADI,KACKC,EADL,OAGiDH,IAAMC,SAAS,SAHhE,mBAGJG,EAHI,KAGoBC,EAHpB,OAIqCL,IAAMC,SAAS,CAAC1E,KAAM,GAAIC,OAAQ,KAJvE,mBAIN8E,EAJM,KAIaC,EAJb,OAKuDP,IAAMC,SAAS,IALtE,mBAKNO,EALM,KAKsBC,EALtB,OAOyDT,IAAMC,SAAS,SAPxE,mBAONS,EAPM,KAOuBC,EAPvB,OAQ+CX,IAAMC,SAAS,CAAC1E,KAAM,GAAIC,OAAQ,KARjF,mBAQNoF,EARM,KAQkBC,EARlB,OASiEb,IAAMC,SAAS,IAThF,mBASNa,EATM,KAS2BC,EAT3B,OAWqEf,IAAMC,SAAS,SAXpF,mBAWJe,EAXI,KAW8BC,EAX9B,OAY2DjB,IAAMC,SAAS,CAAC1E,KAAM,GAAIC,OAAQ,KAZ7F,mBAYJ0F,EAZI,KAYyBC,EAZzB,OAa6EnB,IAAMC,SAAS,IAb5F,mBAaJmB,EAbI,KAakCC,EAblC,OAe6CrB,IAAMC,SAAS,SAf5D,mBAeJqB,EAfI,KAekBC,EAflB,OAgBmCvB,IAAMC,SAAS,CAAC1E,KAAM,GAAIC,OAAQ,KAhBrE,oBAgBJgG,GAhBI,MAgBaC,GAhBb,SAiBqDzB,IAAMC,SAAS,IAjBpE,qBAiBJyB,GAjBI,MAiBsBC,GAjBtB,MAmBLC,GAAuB,WACzB5E,EAAe6E,IAA4BhB,EAA2BE,EAAoCL,IAExGoB,GAAkB,WACpB9E,EAAe+E,IAAuBxB,EAAsBE,EAA+BL,IAEzF4B,GAA4B,WAC9BhF,EAAeiF,IAAiCd,EAAgCE,EAAyCL,IAEvHkB,GAAqB,WACvBlF,EAAemF,IAAqBV,GAAoBE,GAA6BL,IAE3FtB,IAAMoC,WAAU,WACZR,KACAE,KACAE,KACAE,KACAG,OACD,IAEHrC,IAAMoC,WAAU,WACZR,OACD,CAAClB,IAEJV,IAAMoC,WAAU,WACZN,OACD,CAAC1B,IAEFJ,IAAMoC,WAAU,WACZJ,OACD,CAAChB,IAEJhB,IAAMoC,WAAU,WACZF,OACD,CAACZ,IAEJ,IAAMe,GAAqB,WACvBC,YAAW,WACPnC,GAAW,KACZ,OAGDoC,GAAe,WACnB,IAAIC,GAAW,EAOb,MANoB,CAACtB,EAA6BN,EAAwBN,EAAmBkB,IACjFiB,SAAQ,SAAA9G,GACS,IAAvBA,EAAKH,OAAOqE,SACZ2C,GAAW,MAGVA,GAEb,OACI,sCACGD,MAAkBrC,IACrB,yBAAKR,UAAU,cACX,yBAAKA,UAAW,sBACZ,0BAAMA,UAAW,QAAjB,2BACA,yBAAKA,UAAU,gBAIrB6C,OAAmBrC,GACnB,oCACE,yBAAKR,UAAU,kBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,iEAAsC,2CACtC,uFAIZ,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,qCACnB,0BAAMA,UAAW,QAAjB,iCACgC,0CADhC,QAGSb,EAAaiC,EAAiCH,EAAgCD,GAC/E,0BAAMhB,UAAW,QAAjB,mBAMZ,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,kBAAC,EAAD,CACIpE,KAAK,2BACLC,KAAMqF,EAAuBrF,KAC7BC,OAAQoF,EAAuBpF,OAC/BC,QAAS,CACLiH,OAAQ,CACJC,MAAO,CAAC,CACJC,MAAO,CACHC,aAAa,EACbC,aAAc,QAI1BC,OAAQ,CACJC,SAAS,SAQjC,yBAAKtD,UAAU,kBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,wFAA6D,+CAA7D,KACA,4FAIZ,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,qCACnB,0BAAMA,UAAW,QAAjB,oDAGSb,EAAauC,EAAsCH,EAAqCD,MAIrG,yBAAKtB,UAAU,uBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACf,kBAAC,EAAD,CACIpE,KAAK,gCACLC,KAAM2F,EAA4B3F,KAClCC,OAAQ0F,EAA4B1F,OACpCC,QAAS,CACLiH,OAAQ,CACJC,MAAO,CAAC,CACJC,MAAO,CACHC,aAAa,MAIzBE,OAAQ,CACJC,SAAS,IAGjBtH,MAAM,mBAKlB,yBAAKgE,UAAU,kBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,sCAAW,0CAAX,YACA,2HAIZ,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,qCACnB,0BAAMA,UAAW,QAAjB,oCAGSb,EAAa2B,EAA4BH,EAA2BD,MAIjF,yBAAKV,UAAU,uBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,kBAAC,EAAD,CACIpE,KAAK,sBACLC,KAAM+E,EAAkB/E,KACxBC,OAAQ8E,EAAkB9E,OAC1BC,QAAS,CACLiH,OAAQ,CACJC,MAAO,CAAC,CACJC,MAAO,CACHC,aAAa,MAIzBE,OAAQ,CACJC,SAAS,IAGjBtH,MAAO,eAMvB,yBAAKgE,UAAU,kBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,gDAAqB,yCAArB,SACA,4DAIZ,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,qCACnB,0BAAMA,UAAW,QAAjB,uCAGSb,EAAa6C,GAA0BH,EAAyBD,MAI7E,yBAAK5B,UAAU,uBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,kBAAC,EAAD,CACIpE,KAAK,mBACLC,KAAMiG,GAAgBjG,KACtBC,OAAQgG,GAAgBhG,OACxBC,QAAS,CACLiH,OAAQ,CACJC,MAAO,CAAC,CACJC,MAAO,CACHC,aAAa,EACbC,aAAc,QAI1BC,OAAQ,CACJC,SAAS,IAGjBtH,MAAO,kBC1SbuH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,sD,mBCA3CD,EAAOC,QAAU,IAA0B,iD,mBCA3CD,EAAOC,QAAU,IAA0B,2D,mBCA3CD,EAAOC,QAAU,IAA0B,8C","file":"static/js/main.dd9e2fdf.chunk.js","sourcesContent":["import React from 'react';\nimport {Line as ChartLine} from 'react-chartjs-2';\n\nconst Line = ({name, keys, values, options = {}, color = '75,192,192'}) => (\n    <ChartLine\n        options={options}\n        data={{\n            labels: keys,\n            datasets: [\n                {\n                    label: name,\n                    // fill: false,\n                    lineTension: 0.1,\n                    displayColors: false,\n                    backgroundColor: `rgba(${color},0.6)`,\n                    borderColor: `rgba(${color},1)`,\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: `rgba(${color},1)`,\n                    pointBackgroundColor: '#fff',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: `rgba(${color},1)`,\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    data: values\n                }\n            ]\n        }} />\n)\nexport default Line;","import React from 'react';\nimport './App.css';\nimport Papa from 'papaparse'\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\n\nimport totalEnergyConsumptionData from './Dataset/total_energy_consumption.csv';\nimport totalco2EmissionsData from './Dataset/total_co2_emissions.csv';\nimport totalElectricityConsumptionData from './Dataset/total_electricity_consumption.csv';\nimport renewablesShareData from './Dataset/renewables_share.csv';\nimport Line from \"./UI/components/Line\";\n\nasync function getEnerdataCsv(file, setter, countrySetter, index) {\n  const response = await fetch(file)\n  const reader = response.body.getReader()\n  const result = await reader.read() // raw array\n  const decoder = new TextDecoder('utf-8')\n  const csv = decoder.decode(result.value) // the csv text\n  const results = Papa.parse(csv, { header: true }) // object with { data, errors, meta }\n  const rows = results.data // array of objects\n\n  countrySetter(rows.map(row => row.zone));\n  setter({\n    keys: Object\n        .keys(rows.filter(data => data.zone === index)[0])\n        .filter(data => data !== 'zone')\n    ,\n    values: Object\n        .values(rows.filter(data => data.zone === index)[0])\n        .filter(value => value !== 'World')\n        .map(value => parseFloat(value))\n  })\n}\nconst autoComplete = (options, setIndex, index) => {\n    return (\n        <Autocomplete\n            size=\"small\"\n            options={options}\n            getOptionLabel={(option) => option}\n            defaultValue={'World'}\n            fullWidth={false}\n            onChange={\n                (event, value) => setIndex(value)\n            }\n            renderInput={(params) => (\n                <TextField\n                    {...params}\n                    fullWidth={false}\n                    className={\"widthTranslate\"}\n                    style={{width: (100 + index.length ** 1.7)}}\n                    label={options[index]}\n                    placeholder={options[index]}\n                />\n            )}\n        />\n    )\n}\n\nfunction App() {\n    const [loading, setLoading] = React.useState(true)\n\n    const [totalCo2EmmisionsIndex, setTotalCo2EmmisionsIndex] = React.useState('World')\n  const [totalCo2Emmisions, setTotalCo2Emmisions] = React.useState({keys: [], values: []})\n  const [totalCo2EmmisionsCountries, setTotalCo2EmmisionsCountries] = React.useState([])\n\n  const [totalEnergyConsumptionIndex, setTotalEnergyConsumptionIndex] = React.useState('World')\n  const [totalEnergyConsumption, setTotalEnergyConsumption] = React.useState({keys: [], values: []})\n  const [totalEnergyConsumptionCountries, setTotalEnergyConsumptionCountries] = React.useState([])\n\n    const [totalElectricityConsumptionIndex, setTotalElectricityConsumptionIndex] = React.useState('World')\n    const [totalElectricityConsumption, setTotalElectricityConsumption] = React.useState({keys: [], values: []})\n    const [totalElectricityConsumptionCountries, setTotalElectricityConsumptionCountries] = React.useState([])\n\n    const [renewablesShareIndex, setRenewablesShareIndex] = React.useState('World')\n    const [renewablesShare, setRenewablesShare] = React.useState({keys: [], values: []})\n    const [renewablesShareCountries, setRenewablesShareCountries] = React.useState([])\n\n    const getEnergyConsumption = () => {\n        getEnerdataCsv(totalEnergyConsumptionData, setTotalEnergyConsumption, setTotalEnergyConsumptionCountries, totalEnergyConsumptionIndex)\n    }\n    const getCo2Emissions = () => {\n        getEnerdataCsv(totalco2EmissionsData, setTotalCo2Emmisions, setTotalCo2EmmisionsCountries, totalCo2EmmisionsIndex)\n    }\n    const getElectricityConsumption = () => {\n        getEnerdataCsv(totalElectricityConsumptionData, setTotalElectricityConsumption, setTotalElectricityConsumptionCountries, totalElectricityConsumptionIndex)\n    }\n    const getRenewablesShare = () => {\n        getEnerdataCsv(renewablesShareData, setRenewablesShare, setRenewablesShareCountries, renewablesShareIndex)\n    }\n  React.useEffect(() => {\n      getEnergyConsumption()\n      getCo2Emissions()\n      getElectricityConsumption()\n      getRenewablesShare()\n      delayedCloseLoader();\n  }, [])\n\n  React.useEffect(() => {\n      getEnergyConsumption()\n  }, [totalEnergyConsumptionIndex]) // []\n\n  React.useEffect(() => {\n      getCo2Emissions()\n  }, [totalCo2EmmisionsIndex]) // []\n\n    React.useEffect(() => {\n        getElectricityConsumption()\n    }, [totalElectricityConsumptionIndex]) // []\n\n    React.useEffect(() => {\n        getRenewablesShare()\n    }, [renewablesShareIndex]) // []\n\n    const delayedCloseLoader = () => {\n        setTimeout(() => {\n            setLoading(false)\n        }, 1300);\n    }\n\n    const dataComputed = () => {\n      let computed = true;\n      const mandatoryData = [totalElectricityConsumption, totalEnergyConsumption, totalCo2Emmisions, renewablesShare]\n      mandatoryData.forEach(data => {\n          if (data.values.length === 0) {\n              computed = false;\n          }\n      })\n        return computed;\n    }\n  return (\n      <>\n      {(!dataComputed() || loading) &&\n      <div className=\"box-loader\">\n          <div className={'d-flex flex-column'}>\n              <span className={\"mb-3\"}>Heavy math computing...</span>\n              <div className=\"loader-07\"></div>\n          </div>\n      </div>\n      }\n      {(dataComputed() && !loading) &&\n        <>\n          <div className=\"container my-5\">\n              <div className=\"row\">\n                  <div className=\"col\">\n                      <p>Hello :), i will talk to you about <strong>Energy</strong></p>\n                      <p>We is consuming a lot of it, and it is growing fast..</p>\n                  </div>\n              </div>\n          </div>\n          <div className=\"container mt-5\">\n              <div className=\"row\">\n                  <div className=\"col d-flex justify-content-center\">\n              <span className={\"mr-3\"}>\n                Let's take a look of how much <strong>energy</strong> the\n              </span>\n                      {autoComplete(totalEnergyConsumptionCountries, setTotalEnergyConsumptionIndex, totalEnergyConsumptionIndex)}\n                      <span className={\"mx-3\"}>\n              is consuming\n            </span>\n                  </div>\n              </div>\n          </div>\n          <div className=\"container my-5 pb-5\">\n              <div className=\"row\">\n                  <div className=\"col\">\n                      <Line\n                          name='Total energy consumption'\n                          keys={totalEnergyConsumption.keys}\n                          values={totalEnergyConsumption.values}\n                          options={{\n                              scales: {\n                                  yAxes: [{\n                                      ticks: {\n                                          beginAtZero: true,\n                                          suggestedMax: 2000\n                                      }\n                                  }]\n                              },\n                              legend: {\n                                  display: false\n                              }\n                          }}\n                          >\n                      </Line>\n                  </div>\n              </div>\n          </div>\n          <div className=\"container my-5\">\n              <div className=\"row\">\n                  <div className=\"col\">\n                      <p>Thanks to energy we can produce the amazing thing that is <strong>electricity</strong>.</p>\n                      <p>The power of the vast majority of tools used in our world.</p>\n                  </div>\n              </div>\n          </div>\n          <div className=\"container mt-5\">\n              <div className=\"row\">\n                  <div className=\"col d-flex justify-content-center\">\n              <span className={\"mr-3\"}>\n                Here is the total electricity consumption of the\n              </span>\n                      {autoComplete(totalElectricityConsumptionCountries, setTotalElectricityConsumptionIndex, totalElectricityConsumptionIndex)}\n                  </div>\n              </div>\n          </div>\n          <div className=\"container my-5 pb-5\">\n              <div className=\"row\">\n                  <div className=\"col\">\n                  <Line\n                      name='Total electricity consumption'\n                      keys={totalElectricityConsumption.keys}\n                      values={totalElectricityConsumption.values}\n                      options={{\n                          scales: {\n                              yAxes: [{\n                                  ticks: {\n                                      beginAtZero: true\n                                  }\n                              }]\n                          },\n                          legend: {\n                              display: false\n                          }\n                      }}\n                      color='255, 255, 3'>\n                  </Line>\n                  </div>\n              </div>\n          </div>\n          <div className=\"container my-5\">\n              <div className=\"row\">\n                  <div className=\"col\">\n                      <p>So yes, <strong>energy</strong> is cool</p>\n                      <p>But there is a big issue currently highly coupled with energy consumption, co2 emissions.</p>\n                  </div>\n              </div>\n          </div>\n          <div className=\"container mt-5\">\n              <div className=\"row\">\n                  <div className=\"col d-flex justify-content-center\">\n              <span className={\"mr-3\"}>\n                Here is the co2 emissions of the\n              </span>\n                      {autoComplete(totalCo2EmmisionsCountries, setTotalCo2EmmisionsIndex, totalCo2EmmisionsIndex)}\n                  </div>\n              </div>\n          </div>\n          <div className=\"container my-5 pb-5\">\n              <div className=\"row\">\n                  <div className=\"col\">\n                      <Line\n                          name='Total co2 emissions'\n                          keys={totalCo2Emmisions.keys}\n                          values={totalCo2Emmisions.values}\n                          options={{\n                              scales: {\n                                  yAxes: [{\n                                      ticks: {\n                                          beginAtZero: true,\n                                      }\n                                  }]\n                              },\n                              legend: {\n                                  display: false\n                              }\n                          }}\n                          color={'255,0,0'}\n                      >\n                      </Line>\n                  </div>\n              </div>\n          </div>\n          <div className=\"container my-5\">\n              <div className=\"row\">\n                  <div className=\"col\">\n                      <p>How can we partly <strong>solve</strong> it ?</p>\n                      <p>By using renewable energy.</p>\n                  </div>\n              </div>\n          </div>\n          <div className=\"container mt-5\">\n              <div className=\"row\">\n                  <div className=\"col d-flex justify-content-center\">\n              <span className={\"mr-3\"}>\n                Here is the renewables share of the\n              </span>\n                      {autoComplete(renewablesShareCountries, setRenewablesShareIndex, renewablesShareIndex)}\n                  </div>\n              </div>\n          </div>\n          <div className=\"container my-5 pb-5\">\n              <div className=\"row\">\n                  <div className=\"col\">\n                      <Line\n                          name='Renewables share'\n                          keys={renewablesShare.keys}\n                          values={renewablesShare.values}\n                          options={{\n                              scales: {\n                                  yAxes: [{\n                                      ticks: {\n                                          beginAtZero: true,\n                                          suggestedMax: 100\n                                      }\n                                  }]\n                              },\n                              legend: {\n                                  display: false\n                              }\n                          }}\n                          color={'0,255,0'}\n                      >\n                      </Line>\n                  </div>\n              </div>\n          </div>\n      </>\n      }\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/total_energy_consumption.910e7983.csv\";","module.exports = __webpack_public_path__ + \"static/media/total_co2_emissions.ae35b90c.csv\";","module.exports = __webpack_public_path__ + \"static/media/total_electricity_consumption.c23a0dbf.csv\";","module.exports = __webpack_public_path__ + \"static/media/renewables_share.9ef3a7c8.csv\";"],"sourceRoot":""}