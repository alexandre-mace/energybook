{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["getEnerdataCsv","file","setter","countrySetter","index","a","fetch","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","value","results","Papa","parse","header","rows","data","map","row","zone","keys","Object","filter","values","parseFloat","App","React","useState","totalCo2EmmisionsIndex","setTotalCo2EmmisionsIndex","totalCo2Emmisions","setTotalCo2Emmisions","totalCo2EmmisionsCountries","setTotalCo2EmmisionsCountries","totalEnergyConsumptionIndex","setTotalEnergyConsumptionIndex","totalEnergyConsumption","setTotalEnergyConsumption","totalEnergyConsumptionCountries","setTotalEnergyConsumptionCountries","totalElectricityConsumptionIndex","setTotalElectricityConsumptionIndex","totalElectricityConsumption","setTotalElectricityConsumption","totalElectricityConsumptionCountries","setTotalElectricityConsumptionCountries","renewablesShareIndex","setRenewablesShareIndex","renewablesShare","setRenewablesShare","renewablesShareCountries","setRenewablesShareCountries","useEffect","autoComplete","options","setIndex","Autocomplete","size","getOptionLabel","option","defaultValue","fullWidth","onChange","event","renderInput","params","TextField","className","style","width","length","label","placeholder","line","name","color","labels","datasets","lineTension","displayColors","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","scales","yAxes","ticks","beginAtZero","suggestedMax","legend","display","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2PAOeA,E,oFAAf,WAA8BC,EAAMC,EAAQC,EAAeC,GAA3D,2BAAAC,EAAA,sEACyBC,MAAML,GAD/B,cACQM,EADR,OAEQC,EAASD,EAASE,KAAKC,YAF/B,SAGuBF,EAAOG,OAH9B,OAGQC,EAHR,OAIQC,EAAU,IAAIC,YAAY,SAC1BC,EAAMF,EAAQG,OAAOJ,EAAOK,OAC5BC,EAAUC,IAAKC,MAAML,EAAK,CAAEM,QAAQ,IACpCC,EAAOJ,EAAQK,KAErBpB,EAAcmB,EAAKE,KAAI,SAAAC,GAAG,OAAIA,EAAIC,SAClCxB,EAAO,CACLyB,KAAMC,OACDD,KAAKL,EAAKO,QAAO,SAAAN,GAAI,OAAIA,EAAKG,OAAStB,KAAO,IAC9CyB,QAAO,SAAAN,GAAI,MAAa,SAATA,KAEpBO,OAAQF,OACHE,OAAOR,EAAKO,QAAO,SAAAN,GAAI,OAAIA,EAAKG,OAAStB,KAAO,IAChDyB,QAAO,SAAAZ,GAAK,MAAc,UAAVA,KAChBO,KAAI,SAAAP,GAAK,OAAIc,WAAWd,QAlBjC,6C,sBA0See,MApRf,WAAgB,IAAD,EAC+CC,IAAMC,SAAS,SAD9D,mBACNC,EADM,KACkBC,EADlB,OAEqCH,IAAMC,SAAS,CAACP,KAAM,GAAIG,OAAQ,KAFvE,mBAENO,EAFM,KAEaC,EAFb,OAGuDL,IAAMC,SAAS,IAHtE,mBAGNK,EAHM,KAGsBC,EAHtB,OAKyDP,IAAMC,SAAS,SALxE,mBAKNO,EALM,KAKuBC,EALvB,OAM+CT,IAAMC,SAAS,CAACP,KAAM,GAAIG,OAAQ,KANjF,mBAMNa,EANM,KAMkBC,EANlB,OAOiEX,IAAMC,SAAS,IAPhF,mBAONW,EAPM,KAO2BC,EAP3B,OASqEb,IAAMC,SAAS,SATpF,mBASJa,EATI,KAS8BC,EAT9B,OAU2Df,IAAMC,SAAS,CAACP,KAAM,GAAIG,OAAQ,KAV7F,mBAUJmB,EAVI,KAUyBC,EAVzB,OAW6EjB,IAAMC,SAAS,IAX5F,mBAWJiB,EAXI,KAWkCC,EAXlC,OAa6CnB,IAAMC,SAAS,SAb5D,mBAaJmB,EAbI,KAakBC,EAblB,OAcmCrB,IAAMC,SAAS,CAACP,KAAM,GAAIG,OAAQ,KAdrE,mBAcJyB,EAdI,KAcaC,EAdb,OAeqDvB,IAAMC,SAAS,IAfpE,mBAeJuB,EAfI,KAesBC,EAftB,KAiBbzB,IAAM0B,WAAU,WACd3D,EAAe,wCAAyC4C,EAA2BE,EAAoCL,GACvHzC,EAAe,mCAAoCsC,EAAsBE,EAA+BL,GACxGnC,EAAe,6CAA8CkD,EAAgCE,EAAyCL,GACtI/C,EAAe,gCAAiCwD,EAAoBE,EAA6BL,KAChG,IAEHpB,IAAM0B,WAAU,WACd3D,EAAe,wCAAyC4C,EAA2BE,EAAoCL,KACtH,CAACA,IAEJR,IAAM0B,WAAU,WACd3D,EAAe,mCAAoCsC,EAAsBE,EAA+BL,KACvG,CAACA,IAEFF,IAAM0B,WAAU,WACZ3D,EAAe,6CAA8CkD,EAAgCE,EAAyCL,KACvI,CAACA,IAEJd,IAAM0B,WAAU,WACZ3D,EAAe,gCAAiCwD,EAAoBE,EAA6BL,KAClG,CAACA,IAEN,IAAMO,GAAe,SAACC,EAASC,EAAU1D,GACvC,OACI,kBAAC2D,EAAA,EAAD,CACIC,KAAK,QACLH,QAASA,EACTI,eAAgB,SAACC,GAAD,OAAYA,GAC5BC,aAAc,QACdC,WAAW,EACXC,SACE,SAACC,EAAOrD,GAAR,OAAkB6C,EAAS7C,IAE7BsD,YAAa,SAACC,GAAD,OACT,kBAACC,EAAA,EAAD,iBACQD,EADR,CAEIJ,WAAW,EACXM,UAAW,iBACXC,MAAO,CAACC,MAAQ,aAAMxE,EAAMyE,OAAU,MACtCC,MAAOjB,EAAQzD,GACf2E,YAAalB,EAAQzD,UASjC4E,GAAO,SAACC,EAAMtD,EAAMG,GAAb,IAAqB+B,EAArB,uDAA+B,GAAIqB,EAAnC,uDAFQ,aAER,OACX,kBAAC,OAAD,CACIrB,QAASA,EACTtC,KAAM,CACJ4D,OAAQxD,EACRyD,SAAU,CACR,CACEN,MAAOG,EAEPI,YAAa,GACbC,eAAe,EACfC,gBAAgB,QAAD,OAAUL,EAAV,SACfM,YAAY,QAAD,OAAUN,EAAV,OACXO,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAiB,QAAD,OAAUX,EAAV,OAChBY,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA0B,QAAD,OAAUf,EAAV,OACzBgB,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChB9E,KAAMO,QAKlB,OACE,oCACE,yBAAK4C,UAAU,kBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,iEAAsC,2CACtC,uFAIN,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,qCACX,0BAAMA,UAAW,QAAjB,iCACgC,0CADhC,QAGDd,GAAaf,EAAiCH,EAAgCD,GAC/E,0BAAMiC,UAAW,QAAjB,mBAMJ,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACVM,GACG,2BACArC,EAAuBhB,KACvBgB,EAAuBb,OACvB,CACIwE,OAAQ,CACJC,MAAO,CAAC,CACJC,MAAO,CACHC,aAAa,EACbC,aAAc,QAI1BC,OAAQ,CACJC,SAAS,QAOjC,yBAAKlC,UAAU,kBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,wFAA6D,+CAA7D,KACA,4FAIZ,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,qCACjB,0BAAMA,UAAW,QAAjB,oDAGOd,GAAaT,EAAsCH,EAAqCD,MAIvG,yBAAK2B,UAAU,uBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACZM,GACG,gCACA/B,EAA4BtB,KAC5BsB,EAA4BnB,OAC5B,CACEwE,OAAQ,CACNC,MAAO,CAAC,CACNC,MAAO,CACLC,aAAa,MAInBE,OAAQ,CACNC,SAAS,IAGb,kBAKV,yBAAKlC,UAAU,kBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,sCAAW,0CAAX,YACA,2HAIN,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,qCACX,0BAAMA,UAAW,QAAjB,oCAGDd,GAAarB,EAA4BH,EAA2BD,MAI3E,yBAAKuC,UAAU,uBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACZM,GACG,sBACA3C,EAAkBV,KAClBU,EAAkBP,OAClB,CACEwE,OAAQ,CACNC,MAAO,CAAC,CACNC,MAAO,CACLC,aAAa,MAInBE,OAAQ,CACNC,SAAS,IAGb,cAKR,yBAAKlC,UAAU,kBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,gDAAqB,yCAArB,SACA,4DAIZ,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,qCACjB,0BAAMA,UAAW,QAAjB,uCAGOd,GAAaH,EAA0BH,EAAyBD,MAI7E,yBAAKqB,UAAU,uBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACVM,GACG,mBACAzB,EAAgB5B,KAChB4B,EAAgBzB,OAChB,CACIwE,OAAQ,CACJC,MAAO,CAAC,CACJC,MAAO,CACHC,aAAa,EACbC,aAAc,QAI1BC,OAAQ,CACJC,SAAS,IAGjB,gBC5RJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.01344b2e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {Line} from \"react-chartjs-2\";\nimport Papa from 'papaparse'\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\n\nasync function getEnerdataCsv(file, setter, countrySetter, index) {\n  const response = await fetch(file)\n  const reader = response.body.getReader()\n  const result = await reader.read() // raw array\n  const decoder = new TextDecoder('utf-8')\n  const csv = decoder.decode(result.value) // the csv text\n  const results = Papa.parse(csv, { header: true }) // object with { data, errors, meta }\n  const rows = results.data // array of objects\n\n  countrySetter(rows.map(row => row.zone));\n  setter({\n    keys: Object\n        .keys(rows.filter(data => data.zone === index)[0])\n        .filter(data => data !== 'zone')\n    ,\n    values: Object\n        .values(rows.filter(data => data.zone === index)[0])\n        .filter(value => value !== 'World')\n        .map(value => parseFloat(value))\n  })\n}\n\nfunction App() {\n  const [totalCo2EmmisionsIndex, setTotalCo2EmmisionsIndex] = React.useState('World')\n  const [totalCo2Emmisions, setTotalCo2Emmisions] = React.useState({keys: [], values: []})\n  const [totalCo2EmmisionsCountries, setTotalCo2EmmisionsCountries] = React.useState([])\n\n  const [totalEnergyConsumptionIndex, setTotalEnergyConsumptionIndex] = React.useState('World')\n  const [totalEnergyConsumption, setTotalEnergyConsumption] = React.useState({keys: [], values: []})\n  const [totalEnergyConsumptionCountries, setTotalEnergyConsumptionCountries] = React.useState([])\n\n    const [totalElectricityConsumptionIndex, setTotalElectricityConsumptionIndex] = React.useState('World')\n    const [totalElectricityConsumption, setTotalElectricityConsumption] = React.useState({keys: [], values: []})\n    const [totalElectricityConsumptionCountries, setTotalElectricityConsumptionCountries] = React.useState([])\n\n    const [renewablesShareIndex, setRenewablesShareIndex] = React.useState('World')\n    const [renewablesShare, setRenewablesShare] = React.useState({keys: [], values: []})\n    const [renewablesShareCountries, setRenewablesShareCountries] = React.useState([])\n\n  React.useEffect(() => {\n    getEnerdataCsv('/Dataset/total_energy_consumption.csv', setTotalEnergyConsumption, setTotalEnergyConsumptionCountries, totalEnergyConsumptionIndex)\n    getEnerdataCsv('/Dataset/total_co2_emissions.csv', setTotalCo2Emmisions, setTotalCo2EmmisionsCountries, totalCo2EmmisionsIndex)\n    getEnerdataCsv('/Dataset/total_electricity_consumption.csv', setTotalElectricityConsumption, setTotalElectricityConsumptionCountries, totalElectricityConsumptionIndex)\n    getEnerdataCsv('/Dataset/renewables_share.csv', setRenewablesShare, setRenewablesShareCountries, renewablesShareIndex)\n  }, [])\n\n  React.useEffect(() => {\n    getEnerdataCsv('/Dataset/total_energy_consumption.csv', setTotalEnergyConsumption, setTotalEnergyConsumptionCountries, totalEnergyConsumptionIndex)\n  }, [totalEnergyConsumptionIndex]) // []\n\n  React.useEffect(() => {\n    getEnerdataCsv('/Dataset/total_co2_emissions.csv', setTotalCo2Emmisions, setTotalCo2EmmisionsCountries, totalCo2EmmisionsIndex)\n  }, [totalCo2EmmisionsIndex]) // []\n\n    React.useEffect(() => {\n        getEnerdataCsv('/Dataset/total_electricity_consumption.csv', setTotalElectricityConsumption, setTotalElectricityConsumptionCountries, totalElectricityConsumptionIndex)\n    }, [totalElectricityConsumptionIndex]) // []\n\n    React.useEffect(() => {\n        getEnerdataCsv('/Dataset/renewables_share.csv', setRenewablesShare, setRenewablesShareCountries, renewablesShareIndex)\n    }, [renewablesShareIndex]) // []\n\n  const autoComplete = (options, setIndex, index) => {\n    return (\n        <Autocomplete\n            size=\"small\"\n            options={options}\n            getOptionLabel={(option) => option}\n            defaultValue={'World'}\n            fullWidth={false}\n            onChange={\n              (event, value) => setIndex(value)\n            }\n            renderInput={(params) => (\n                <TextField\n                    {...params}\n                    fullWidth={false}\n                    className={\"widthTranslate\"}\n                    style={{width: (100 + index.length ** 1.7)}}\n                    label={options[index]}\n                    placeholder={options[index]}\n                />\n            )}\n        />\n    )\n  }\n\n  const defaultColor = '75,192,192';\n\n  const line = (name, keys, values, options = {}, color = defaultColor) => (\n    <Line\n        options={options}\n        data={{\n          labels: keys,\n          datasets: [\n            {\n              label: name,\n              // fill: false,\n              lineTension: 0.1,\n              displayColors: false,\n              backgroundColor: `rgba(${color},0.6)`,\n              borderColor: `rgba(${color},1)`,\n              borderCapStyle: 'butt',\n              borderDash: [],\n              borderDashOffset: 0.0,\n              borderJoinStyle: 'miter',\n              pointBorderColor: `rgba(${color},1)`,\n              pointBackgroundColor: '#fff',\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: `rgba(${color},1)`,\n              pointHoverBorderColor: 'rgba(220,220,220,1)',\n              pointHoverBorderWidth: 2,\n              pointRadius: 1,\n              pointHitRadius: 10,\n              data: values\n            }\n          ]\n        }} />\n  )\n  return (\n    <>\n      <div className=\"container my-5\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <p>Hello :), i will talk to you about <strong>Energy</strong></p>\n            <p>We is consuming a lot of it, and it is growing fast..</p>\n          </div>\n        </div>\n      </div>\n      <div className=\"container mt-5\">\n        <div className=\"row\">\n          <div className=\"col d-flex justify-content-center\">\n              <span className={\"mr-3\"}>\n                Let's take a look of how much <strong>energy</strong> the\n              </span>\n            {autoComplete(totalEnergyConsumptionCountries, setTotalEnergyConsumptionIndex, totalEnergyConsumptionIndex)}\n            <span className={\"mx-3\"}>\n              is consuming\n            </span>\n          </div>\n        </div>\n      </div>\n        <div className=\"container my-5 pb-5\">\n            <div className=\"row\">\n                <div className=\"col\">\n                    {line(\n                        'Total energy consumption',\n                        totalEnergyConsumption.keys,\n                        totalEnergyConsumption.values,\n                        {\n                            scales: {\n                                yAxes: [{\n                                    ticks: {\n                                        beginAtZero: true,\n                                        suggestedMax: 2000\n                                    }\n                                }]\n                            },\n                            legend: {\n                                display: false\n                            }\n                        }\n                    )}\n                </div>\n            </div>\n        </div>\n        <div className=\"container my-5\">\n            <div className=\"row\">\n                <div className=\"col\">\n                    <p>Thanks to energy we can produce the amazing thing that is <strong>electricity</strong>.</p>\n                    <p>The power of the vast majority of tools used in our world.</p>\n                </div>\n            </div>\n        </div>\n        <div className=\"container mt-5\">\n            <div className=\"row\">\n                <div className=\"col d-flex justify-content-center\">\n              <span className={\"mr-3\"}>\n                Here is the total electricity consumption of the\n              </span>\n                    {autoComplete(totalElectricityConsumptionCountries, setTotalElectricityConsumptionIndex, totalElectricityConsumptionIndex)}\n                </div>\n            </div>\n        </div>\n      <div className=\"container my-5 pb-5\">\n        <div className=\"row\">\n          <div className=\"col\">\n            {line(\n                'Total electricity consumption',\n                totalElectricityConsumption.keys,\n                totalElectricityConsumption.values,\n                {\n                  scales: {\n                    yAxes: [{\n                      ticks: {\n                        beginAtZero: true\n                      }\n                    }]\n                  },\n                  legend: {\n                    display: false\n                  }\n                },\n                '255, 255, 3'\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"container my-5\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <p>So yes, <strong>energy</strong> is cool</p>\n            <p>But there is a big issue currently highly coupled with energy consumption, co2 emissions.</p>\n          </div>\n        </div>\n      </div>\n      <div className=\"container mt-5\">\n        <div className=\"row\">\n          <div className=\"col d-flex justify-content-center\">\n              <span className={\"mr-3\"}>\n                Here is the co2 emissions of the\n              </span>\n            {autoComplete(totalCo2EmmisionsCountries, setTotalCo2EmmisionsIndex, totalCo2EmmisionsIndex)}\n          </div>\n        </div>\n      </div>\n      <div className=\"container my-5 pb-5\">\n        <div className=\"row\">\n          <div className=\"col\">\n            {line(\n                'Total co2 emissions',\n                totalCo2Emmisions.keys,\n                totalCo2Emmisions.values,\n                {\n                  scales: {\n                    yAxes: [{\n                      ticks: {\n                        beginAtZero: true\n                      }\n                    }]\n                  },\n                  legend: {\n                    display: false\n                  }\n                },\n                '255,0,0'\n            )}\n          </div>\n        </div>\n      </div>\n        <div className=\"container my-5\">\n            <div className=\"row\">\n                <div className=\"col\">\n                    <p>How can we partly <strong>solve</strong> it ?</p>\n                    <p>By using renewable energy.</p>\n                </div>\n            </div>\n        </div>\n        <div className=\"container mt-5\">\n            <div className=\"row\">\n                <div className=\"col d-flex justify-content-center\">\n              <span className={\"mr-3\"}>\n                Here is the renewables share of the\n              </span>\n                    {autoComplete(renewablesShareCountries, setRenewablesShareIndex, renewablesShareIndex)}\n                </div>\n            </div>\n        </div>\n        <div className=\"container my-5 pb-5\">\n            <div className=\"row\">\n                <div className=\"col\">\n                    {line(\n                        'Renewables share',\n                        renewablesShare.keys,\n                        renewablesShare.values,\n                        {\n                            scales: {\n                                yAxes: [{\n                                    ticks: {\n                                        beginAtZero: true,\n                                        suggestedMax: 100\n                                    }\n                                }]\n                            },\n                            legend: {\n                                display: false\n                            }\n                        },\n                        '0,255,0'\n                    )}\n                </div>\n            </div>\n        </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}